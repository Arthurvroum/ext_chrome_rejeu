{"ast":null,"code":"import { ref, watch, onMounted } from 'vue';\nexport default {\n  name: 'CaptureDialog',\n  props: {\n    modelValue: {\n      type: Boolean,\n      required: true\n    },\n    form: {\n      type: Object,\n      required: true\n    },\n    sourceOptions: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['update:model-value', 'save'],\n  setup(props, {\n    emit\n  }) {\n    const form = ref(null);\n    // Use a local copy of the form data\n    const localForm = ref({\n      ...props.form\n    });\n\n    // Watch for changes in the form prop\n    watch(() => props.form, newForm => {\n      localForm.value = {\n        ...newForm\n      };\n    }, {\n      deep: true\n    });\n\n    // Watch for dialog opening to log\n    watch(() => props.modelValue, isOpen => {\n      if (isOpen) {\n        console.log('CaptureDialog opened with form:', localForm.value);\n      }\n    });\n    onMounted(() => {\n      console.log('CaptureDialog mounted with form:', props.form);\n    });\n    const handleSave = () => {\n      // Debug log\n      console.log('Save button clicked in CaptureDialog with form data:', localForm.value);\n\n      // Basic validation\n      if (!localForm.value.name || !localForm.value.regex) {\n        console.error('Validation failed: name or regex is missing');\n        return;\n      }\n\n      // Clone the object to avoid reference issues\n      const formData = {\n        ...localForm.value\n      };\n      console.log('Emitting save event with data:', formData);\n\n      // Emit the save event with the form data\n      emit('save', formData);\n\n      // Close the dialog\n      emit('update:model-value', false);\n    };\n    return {\n      form,\n      localForm,\n      handleSave\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}