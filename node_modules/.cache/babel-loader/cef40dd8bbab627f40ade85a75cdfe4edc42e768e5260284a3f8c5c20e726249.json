{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { createVNode as _createVNode, mergeProps as _mergeProps, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VDatePicker.css\";\n\n// Components\nimport { makeVDatePickerControlsProps, VDatePickerControls } from \"./VDatePickerControls.js\";\nimport { VDatePickerHeader } from \"./VDatePickerHeader.js\";\nimport { makeVDatePickerMonthProps, VDatePickerMonth } from \"./VDatePickerMonth.js\";\nimport { makeVDatePickerMonthsProps, VDatePickerMonths } from \"./VDatePickerMonths.js\";\nimport { makeVDatePickerYearsProps, VDatePickerYears } from \"./VDatePickerYears.js\";\nimport { VFadeTransition } from \"../transitions/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { makeVPickerProps, VPicker } from \"../../labs/VPicker/VPicker.js\"; // Composables\nimport { useDate } from \"../../composables/date/index.js\";\nimport { useLocale, useRtl } from \"../../composables/locale.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\nimport { computed, ref, shallowRef, watch } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender, wrapInArray } from \"../../util/index.js\"; // Types\n// Types\nexport const makeVDatePickerProps = propsFactory({\n  // TODO: implement in v3.5\n  // calendarIcon: {\n  //   type: String,\n  //   default: '$calendar',\n  // },\n  // keyboardIcon: {\n  //   type: String,\n  //   default: '$edit',\n  // },\n  // inputMode: {\n  //   type: String as PropType<'calendar' | 'keyboard'>,\n  //   default: 'calendar',\n  // },\n  // inputText: {\n  //   type: String,\n  //   default: '$vuetify.datePicker.input.placeholder',\n  // },\n  // inputPlaceholder: {\n  //   type: String,\n  //   default: 'dd/mm/yyyy',\n  // },\n  header: {\n    type: String,\n    default: '$vuetify.datePicker.header'\n  },\n  headerColor: String,\n  ...makeVDatePickerControlsProps(),\n  ...makeVDatePickerMonthProps({\n    weeksInMonth: 'static'\n  }),\n  ...omit(makeVDatePickerMonthsProps(), ['modelValue']),\n  ...omit(makeVDatePickerYearsProps(), ['modelValue']),\n  ...makeVPickerProps({\n    title: '$vuetify.datePicker.title'\n  }),\n  modelValue: null\n}, 'VDatePicker');\nexport const VDatePicker = genericComponent()({\n  name: 'VDatePicker',\n  props: makeVDatePickerProps(),\n  emits: {\n    'update:modelValue': date => true,\n    'update:month': date => true,\n    'update:year': date => true,\n    // 'update:inputMode': (date: any) => true,\n    'update:viewMode': date => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const adapter = useDate();\n    const {\n      t\n    } = useLocale();\n    const {\n      rtlClasses\n    } = useRtl();\n    const model = useProxiedModel(props, 'modelValue', undefined, v => wrapInArray(v).map(i => adapter.date(i)), v => props.multiple ? v : v[0]);\n    const viewMode = useProxiedModel(props, 'viewMode');\n    // const inputMode = useProxiedModel(props, 'inputMode')\n\n    const minDate = computed(() => {\n      const date = adapter.date(props.min);\n      return props.min && adapter.isValid(date) ? date : null;\n    });\n    const maxDate = computed(() => {\n      const date = adapter.date(props.max);\n      return props.max && adapter.isValid(date) ? date : null;\n    });\n    const internal = computed(() => {\n      const today = adapter.date();\n      let value = today;\n      if (model.value?.[0]) {\n        value = adapter.date(model.value[0]);\n      } else if (minDate.value && adapter.isBefore(today, minDate.value)) {\n        value = minDate.value;\n      } else if (maxDate.value && adapter.isAfter(today, maxDate.value)) {\n        value = maxDate.value;\n      }\n      return value && adapter.isValid(value) ? value : today;\n    });\n    const headerColor = computed(() => props.headerColor ?? props.color);\n    const month = ref(Number(props.month ?? adapter.getMonth(adapter.startOfMonth(internal.value))));\n    const year = ref(Number(props.year ?? adapter.getYear(adapter.startOfYear(adapter.setMonth(internal.value, month.value)))));\n    const isReversing = shallowRef(false);\n    const header = computed(() => {\n      if (props.multiple && model.value.length > 1) {\n        return t('$vuetify.datePicker.itemsSelected', model.value.length);\n      }\n      return model.value[0] && adapter.isValid(model.value[0]) ? adapter.format(adapter.date(model.value[0]), 'normalDateWithWeekday') : t(props.header);\n    });\n    const text = computed(() => {\n      let date = adapter.date();\n      date = adapter.setDate(date, 1);\n      date = adapter.setMonth(date, month.value);\n      date = adapter.setYear(date, year.value);\n      return adapter.format(date, 'monthAndYear');\n    });\n    // const headerIcon = computed(() => props.inputMode === 'calendar' ? props.keyboardIcon : props.calendarIcon)\n    const headerTransition = computed(() => `date-picker-header${isReversing.value ? '-reverse' : ''}-transition`);\n    const disabled = computed(() => {\n      if (props.disabled) return true;\n      const targets = [];\n      if (viewMode.value !== 'month') {\n        targets.push(...['prev', 'next']);\n      } else {\n        let _date = adapter.date();\n        _date = adapter.startOfMonth(_date);\n        _date = adapter.setMonth(_date, month.value);\n        _date = adapter.setYear(_date, year.value);\n        if (minDate.value) {\n          const date = adapter.addDays(adapter.startOfMonth(_date), -1);\n          adapter.isAfter(minDate.value, date) && targets.push('prev');\n        }\n        if (maxDate.value) {\n          const date = adapter.addDays(adapter.endOfMonth(_date), 1);\n          adapter.isAfter(date, maxDate.value) && targets.push('next');\n        }\n      }\n      return targets;\n    });\n\n    // function onClickAppend () {\n    //   inputMode.value = inputMode.value === 'calendar' ? 'keyboard' : 'calendar'\n    // }\n\n    function onClickNext() {\n      if (month.value < 11) {\n        month.value++;\n      } else {\n        year.value++;\n        month.value = 0;\n        onUpdateYear(year.value);\n      }\n      onUpdateMonth(month.value);\n    }\n    function onClickPrev() {\n      if (month.value > 0) {\n        month.value--;\n      } else {\n        year.value--;\n        month.value = 11;\n        onUpdateYear(year.value);\n      }\n      onUpdateMonth(month.value);\n    }\n    function onClickDate() {\n      viewMode.value = 'month';\n    }\n    function onClickMonth() {\n      viewMode.value = viewMode.value === 'months' ? 'month' : 'months';\n    }\n    function onClickYear() {\n      viewMode.value = viewMode.value === 'year' ? 'month' : 'year';\n    }\n    function onUpdateMonth(value) {\n      if (viewMode.value === 'months') onClickMonth();\n      emit('update:month', value);\n    }\n    function onUpdateYear(value) {\n      if (viewMode.value === 'year') onClickYear();\n      emit('update:year', value);\n    }\n    watch(model, (val, oldVal) => {\n      const arrBefore = wrapInArray(oldVal);\n      const arrAfter = wrapInArray(val);\n      if (!arrAfter.length) return;\n      const before = adapter.date(arrBefore[arrBefore.length - 1]);\n      const after = adapter.date(arrAfter[arrAfter.length - 1]);\n      const newMonth = adapter.getMonth(after);\n      const newYear = adapter.getYear(after);\n      if (newMonth !== month.value) {\n        month.value = newMonth;\n        onUpdateMonth(month.value);\n      }\n      if (newYear !== year.value) {\n        year.value = newYear;\n        onUpdateYear(year.value);\n      }\n      isReversing.value = adapter.isBefore(before, after);\n    });\n    useRender(() => {\n      const pickerProps = VPicker.filterProps(props);\n      const datePickerControlsProps = VDatePickerControls.filterProps(props);\n      const datePickerHeaderProps = VDatePickerHeader.filterProps(props);\n      const datePickerMonthProps = VDatePickerMonth.filterProps(props);\n      const datePickerMonthsProps = omit(VDatePickerMonths.filterProps(props), ['modelValue']);\n      const datePickerYearsProps = omit(VDatePickerYears.filterProps(props), ['modelValue']);\n      const headerProps = {\n        color: headerColor.value,\n        header: header.value,\n        transition: headerTransition.value\n      };\n      return _createVNode(VPicker, _mergeProps(pickerProps, {\n        \"color\": headerColor.value,\n        \"class\": ['v-date-picker', `v-date-picker--${viewMode.value}`, {\n          'v-date-picker--show-week': props.showWeek\n        }, rtlClasses.value, props.class],\n        \"style\": props.style\n      }), {\n        title: () => slots.title?.() ?? _createVNode(\"div\", {\n          \"class\": \"v-date-picker__title\"\n        }, [t(props.title)]),\n        header: () => slots.header ? _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VDatePickerHeader: {\n              ...headerProps\n            }\n          }\n        }, {\n          default: () => [slots.header?.(headerProps)]\n        }) : _createVNode(VDatePickerHeader, _mergeProps({\n          \"key\": \"header\"\n        }, datePickerHeaderProps, headerProps, {\n          \"onClick\": viewMode.value !== 'month' ? onClickDate : undefined\n        }), {\n          ...slots,\n          default: undefined\n        }),\n        default: () => _createVNode(_Fragment, null, [_createVNode(VDatePickerControls, _mergeProps(datePickerControlsProps, {\n          \"disabled\": disabled.value,\n          \"text\": text.value,\n          \"onClick:next\": onClickNext,\n          \"onClick:prev\": onClickPrev,\n          \"onClick:month\": onClickMonth,\n          \"onClick:year\": onClickYear\n        }), null), _createVNode(VFadeTransition, {\n          \"hideOnLeave\": true\n        }, {\n          default: () => [viewMode.value === 'months' ? _createVNode(VDatePickerMonths, _mergeProps({\n            \"key\": \"date-picker-months\"\n          }, datePickerMonthsProps, {\n            \"modelValue\": month.value,\n            \"onUpdate:modelValue\": [$event => month.value = $event, onUpdateMonth],\n            \"min\": minDate.value,\n            \"max\": maxDate.value,\n            \"year\": year.value\n          }), null) : viewMode.value === 'year' ? _createVNode(VDatePickerYears, _mergeProps({\n            \"key\": \"date-picker-years\"\n          }, datePickerYearsProps, {\n            \"modelValue\": year.value,\n            \"onUpdate:modelValue\": [$event => year.value = $event, onUpdateYear],\n            \"min\": minDate.value,\n            \"max\": maxDate.value\n          }), null) : _createVNode(VDatePickerMonth, _mergeProps({\n            \"key\": \"date-picker-month\"\n          }, datePickerMonthProps, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": $event => model.value = $event,\n            \"month\": month.value,\n            \"onUpdate:month\": [$event => month.value = $event, onUpdateMonth],\n            \"year\": year.value,\n            \"onUpdate:year\": [$event => year.value = $event, onUpdateYear],\n            \"min\": minDate.value,\n            \"max\": maxDate.value\n          }), null)]\n        })]),\n        actions: slots.actions\n      });\n    });\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}