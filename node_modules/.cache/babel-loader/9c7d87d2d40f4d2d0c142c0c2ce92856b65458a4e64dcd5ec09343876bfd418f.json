{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VColorPicker.css\";\n\n// Components\nimport { VColorPickerCanvas } from \"./VColorPickerCanvas.js\";\nimport { VColorPickerEdit } from \"./VColorPickerEdit.js\";\nimport { VColorPickerPreview } from \"./VColorPickerPreview.js\";\nimport { VColorPickerSwatches } from \"./VColorPickerSwatches.js\";\nimport { makeVPickerProps, VPicker } from \"../../labs/VPicker/VPicker.js\"; // Composables\nimport { useRtl } from \"../../composables/index.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\nimport { computed, onBeforeMount, ref, watch } from 'vue';\nimport { extractColor, modes, nullColor } from \"./util/index.js\";\nimport { consoleWarn, defineComponent, HSVtoCSS, parseColor, propsFactory, RGBtoHSV, useRender } from \"../../util/index.js\"; // Types\nexport const makeVColorPickerProps = propsFactory({\n  canvasHeight: {\n    type: [String, Number],\n    default: 150\n  },\n  disabled: Boolean,\n  dotSize: {\n    type: [Number, String],\n    default: 10\n  },\n  hideCanvas: Boolean,\n  hideSliders: Boolean,\n  hideInputs: Boolean,\n  mode: {\n    type: String,\n    default: 'rgba',\n    validator: v => Object.keys(modes).includes(v)\n  },\n  modes: {\n    type: Array,\n    default: () => Object.keys(modes),\n    validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))\n  },\n  showSwatches: Boolean,\n  swatches: Array,\n  swatchesMaxHeight: {\n    type: [Number, String],\n    default: 150\n  },\n  modelValue: {\n    type: [Object, String]\n  },\n  ...makeVPickerProps({\n    hideHeader: true\n  })\n}, 'VColorPicker');\nexport const VColorPicker = defineComponent({\n  name: 'VColorPicker',\n  props: makeVColorPickerProps(),\n  emits: {\n    'update:modelValue': color => true,\n    'update:mode': mode => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const mode = useProxiedModel(props, 'mode');\n    const hue = ref(null);\n    const model = useProxiedModel(props, 'modelValue', undefined, v => {\n      if (v == null || v === '') return null;\n      let c;\n      try {\n        c = RGBtoHSV(parseColor(v));\n      } catch (err) {\n        consoleWarn(err);\n        return null;\n      }\n      return c;\n    }, v => {\n      if (!v) return null;\n      return extractColor(v, props.modelValue);\n    });\n    const currentColor = computed(() => {\n      return model.value ? {\n        ...model.value,\n        h: hue.value ?? model.value.h\n      } : null;\n    });\n    const {\n      rtlClasses\n    } = useRtl();\n    let externalChange = true;\n    watch(model, v => {\n      if (!externalChange) {\n        // prevent hue shift from rgb conversion inaccuracy\n        externalChange = true;\n        return;\n      }\n      if (!v) return;\n      hue.value = v.h;\n    }, {\n      immediate: true\n    });\n    const updateColor = hsva => {\n      externalChange = false;\n      hue.value = hsva.h;\n      model.value = hsva;\n    };\n    onBeforeMount(() => {\n      if (!props.modes.includes(mode.value)) mode.value = props.modes[0];\n    });\n    provideDefaults({\n      VSlider: {\n        color: undefined,\n        trackColor: undefined,\n        trackFillColor: undefined\n      }\n    });\n    useRender(() => {\n      const pickerProps = VPicker.filterProps(props);\n      return _createVNode(VPicker, _mergeProps(pickerProps, {\n        \"class\": ['v-color-picker', rtlClasses.value, props.class],\n        \"style\": [{\n          '--v-color-picker-color-hsv': HSVtoCSS({\n            ...(currentColor.value ?? nullColor),\n            a: 1\n          })\n        }, props.style]\n      }), {\n        ...slots,\n        default: () => _createVNode(_Fragment, null, [!props.hideCanvas && _createVNode(VColorPickerCanvas, {\n          \"key\": \"canvas\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"disabled\": props.disabled,\n          \"dotSize\": props.dotSize,\n          \"width\": props.width,\n          \"height\": props.canvasHeight\n        }, null), (!props.hideSliders || !props.hideInputs) && _createVNode(\"div\", {\n          \"key\": \"controls\",\n          \"class\": \"v-color-picker__controls\"\n        }, [!props.hideSliders && _createVNode(VColorPickerPreview, {\n          \"key\": \"preview\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"hideAlpha\": !mode.value.endsWith('a'),\n          \"disabled\": props.disabled\n        }, null), !props.hideInputs && _createVNode(VColorPickerEdit, {\n          \"key\": \"edit\",\n          \"modes\": props.modes,\n          \"mode\": mode.value,\n          \"onUpdate:mode\": m => mode.value = m,\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"disabled\": props.disabled\n        }, null)]), props.showSwatches && _createVNode(VColorPickerSwatches, {\n          \"key\": \"swatches\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"maxHeight\": props.swatchesMaxHeight,\n          \"swatches\": props.swatches,\n          \"disabled\": props.disabled\n        }, null)])\n      });\n    });\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}