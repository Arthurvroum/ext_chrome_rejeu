{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VEmptyState.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VIcon } from \"../VIcon/index.js\";\nimport { VImg } from \"../VImg/index.js\"; // Composables\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { useDisplay } from \"../../composables/display.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { makeSizeProps } from \"../../composables/size.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\nimport { toRef } from 'vue';\nimport { convertToUnit, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n// Types\nexport const makeVEmptyStateProps = propsFactory({\n  actionText: String,\n  bgColor: String,\n  color: String,\n  icon: IconValue,\n  image: String,\n  justify: {\n    type: String,\n    default: 'center'\n  },\n  headline: String,\n  title: String,\n  text: String,\n  textWidth: {\n    type: [Number, String],\n    default: 500\n  },\n  href: String,\n  to: String,\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n  ...makeSizeProps({\n    size: undefined\n  }),\n  ...makeThemeProps()\n}, 'VEmptyState');\nexport const VEmptyState = genericComponent()({\n  name: 'VEmptyState',\n  props: makeVEmptyStateProps(),\n  emits: {\n    'click:action': e => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      displayClasses\n    } = useDisplay();\n    function onClickAction(e) {\n      emit('click:action', e);\n    }\n    useRender(() => {\n      const hasActions = !!(slots.actions || props.actionText);\n      const hasHeadline = !!(slots.headline || props.headline);\n      const hasTitle = !!(slots.title || props.title);\n      const hasText = !!(slots.text || props.text);\n      const hasMedia = !!(slots.media || props.image || props.icon);\n      const size = props.size || (props.image ? 200 : 96);\n      return _createVNode(\"div\", {\n        \"class\": ['v-empty-state', {\n          [`v-empty-state--${props.justify}`]: true\n        }, themeClasses.value, backgroundColorClasses.value, displayClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value, props.style]\n      }, [hasMedia && _createVNode(\"div\", {\n        \"key\": \"media\",\n        \"class\": \"v-empty-state__media\"\n      }, [!slots.media ? _createVNode(_Fragment, null, [props.image ? _createVNode(VImg, {\n        \"key\": \"image\",\n        \"src\": props.image,\n        \"height\": size\n      }, null) : props.icon ? _createVNode(VIcon, {\n        \"key\": \"icon\",\n        \"color\": props.color,\n        \"size\": size,\n        \"icon\": props.icon\n      }, null) : undefined]) : _createVNode(VDefaultsProvider, {\n        \"key\": \"media-defaults\",\n        \"defaults\": {\n          VImg: {\n            src: props.image,\n            height: size\n          },\n          VIcon: {\n            size,\n            icon: props.icon\n          }\n        }\n      }, {\n        default: () => [slots.media()]\n      })]), hasHeadline && _createVNode(\"div\", {\n        \"key\": \"headline\",\n        \"class\": \"v-empty-state__headline\"\n      }, [slots.headline?.() ?? props.headline]), hasTitle && _createVNode(\"div\", {\n        \"key\": \"title\",\n        \"class\": \"v-empty-state__title\"\n      }, [slots.title?.() ?? props.title]), hasText && _createVNode(\"div\", {\n        \"key\": \"text\",\n        \"class\": \"v-empty-state__text\",\n        \"style\": {\n          maxWidth: convertToUnit(props.textWidth)\n        }\n      }, [slots.text?.() ?? props.text]), slots.default && _createVNode(\"div\", {\n        \"key\": \"content\",\n        \"class\": \"v-empty-state__content\"\n      }, [slots.default()]), hasActions && _createVNode(\"div\", {\n        \"key\": \"actions\",\n        \"class\": \"v-empty-state__actions\"\n      }, [_createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VBtn: {\n            class: 'v-empty-state__action-btn',\n            color: props.color ?? 'surface-variant',\n            href: props.href,\n            text: props.actionText,\n            to: props.to\n          }\n        }\n      }, {\n        default: () => [slots.actions?.({\n          props: {\n            onClick: onClickAction\n          }\n        }) ?? _createVNode(VBtn, {\n          \"onClick\": onClickAction\n        }, null)]\n      })])]);\n    });\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}