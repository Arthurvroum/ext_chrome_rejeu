{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/**\n * Utility functions for formatting and parsing data\n */\n\n/**\n * Extract path from a URL\n * @param {string} url - The full URL\n * @returns {string} - The path component of the URL\n */\nexport function getPathFromUrl(url) {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.pathname + urlObj.search;\n  } catch (e) {\n    // Return the original URL if parsing fails\n    return url;\n  }\n}\n\n/**\n * Format JSON data for display\n * @param {object|string} data - Data to format\n * @returns {string} - Formatted JSON string\n */\nexport function formatJson(data) {\n  if (!data) return 'No data available';\n  try {\n    if (typeof data === 'object') {\n      return JSON.stringify(data, null, 2);\n    } else if (typeof data === 'string') {\n      // Try to parse as JSON if it's a string\n      try {\n        const parsed = JSON.parse(data);\n        return JSON.stringify(parsed, null, 2);\n      } catch {\n        // If parsing fails, just return the string\n        return data;\n      }\n    }\n    return String(data);\n  } catch (e) {\n    console.error('Error formatting JSON:', e);\n    return String(data);\n  }\n}\n\n/**\n * Truncate text to a maximum length and add ellipsis if needed\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length\n * @returns {string} - Truncated text\n */\nexport function truncateText(text, maxLength = 100) {\n  if (!text) return '';\n  if (typeof text !== 'string') text = String(text);\n  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n}\n\n/**\n * Format a timestamp as a human-readable date string\n * @param {number|string} timestamp - Timestamp to format\n * @returns {string} - Formatted date string\n */\nexport function formatDateTime(timestamp) {\n  if (!timestamp) return '';\n  try {\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  } catch (e) {\n    console.error('Error formatting timestamp:', e);\n    return String(timestamp);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}