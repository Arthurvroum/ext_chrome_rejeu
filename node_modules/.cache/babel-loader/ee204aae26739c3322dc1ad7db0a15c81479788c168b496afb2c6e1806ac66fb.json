{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nexport default {\n  name: 'ReplayResults',\n  props: {\n    results: {\n      type: Array,\n      required: true\n    },\n    expandedResult: {\n      type: Number,\n      default: null\n    }\n  },\n  data() {\n    return {\n      localResultTab: 'request'\n    };\n  },\n  computed: {\n    successCount() {\n      return this.results.filter(r => r.status === 'success').length;\n    },\n    errorCount() {\n      return this.results.filter(r => r.status === 'error').length;\n    },\n    skippedCount() {\n      return this.results.filter(r => r.status === 'skipped').length;\n    }\n  },\n  methods: {\n    getStatusColor(status) {\n      if (status === 'success') return 'success';\n      if (status === 'error') return 'error';\n      if (status === 'skipped') return 'warning';\n      return 'grey';\n    },\n    getStatusIcon(status) {\n      if (status === 'success') return 'mdi-check';\n      if (status === 'error') return 'mdi-close';\n      if (status === 'skipped') return 'mdi-skip-next';\n      return 'mdi-help';\n    },\n    hasVariables(result) {\n      return result.capturedVariables && Object.keys(result.capturedVariables).length > 0;\n    },\n    formatJson(data) {\n      if (!data) return 'No data available';\n      try {\n        if (typeof data === 'object') {\n          return JSON.stringify(data, null, 2);\n        } else if (typeof data === 'string') {\n          try {\n            const parsed = JSON.parse(data);\n            return JSON.stringify(parsed, null, 2);\n          } catch {\n            return data;\n          }\n        }\n        return String(data);\n      } catch (e) {\n        console.error('Error formatting JSON:', e);\n        return String(data);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}