{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VNumberInput.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VDivider } from \"../VDivider/index.js\";\nimport { makeVTextFieldProps, VTextField } from \"../VTextField/VTextField.js\"; // Composables\nimport { useHold } from \"./hold.js\";\nimport { useFocus } from \"../../composables/focus.js\";\nimport { useForm } from \"../../composables/form.js\";\nimport { forwardRefs } from \"../../composables/forwardRefs.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { clamp, genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\nconst makeVNumberInputProps = propsFactory({\n  controlVariant: {\n    type: String,\n    default: 'default'\n  },\n  inset: Boolean,\n  hideInput: Boolean,\n  modelValue: {\n    type: Number,\n    default: null\n  },\n  min: {\n    type: Number,\n    default: Number.MIN_SAFE_INTEGER\n  },\n  max: {\n    type: Number,\n    default: Number.MAX_SAFE_INTEGER\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  precision: {\n    type: Number,\n    default: 0\n  },\n  ...omit(makeVTextFieldProps(), ['modelValue', 'validationValue'])\n}, 'VNumberInput');\nexport const VNumberInput = genericComponent()({\n  name: 'VNumberInput',\n  props: {\n    ...makeVNumberInputProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const vTextFieldRef = ref();\n    const {\n      holdStart,\n      holdStop\n    } = useHold({\n      toggleUpDown\n    });\n    const form = useForm(props);\n    const controlsDisabled = computed(() => form.isDisabled.value || form.isReadonly.value);\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    function correctPrecision(val) {\n      let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.precision;\n      const fixed = precision == null ? String(val) : val.toFixed(precision);\n      return isFocused.value ? Number(fixed).toString() // trim zeros\n      : fixed;\n    }\n    const model = useProxiedModel(props, 'modelValue', null, val => val ?? null, val => val == null ? val ?? null : clamp(Number(val), props.min, props.max));\n    const _inputText = shallowRef(null);\n    watchEffect(() => {\n      if (isFocused.value && !controlsDisabled.value) {\n        // ignore external changes\n      } else if (model.value == null) {\n        _inputText.value = null;\n      } else if (!isNaN(model.value)) {\n        _inputText.value = correctPrecision(model.value);\n      }\n    });\n    const inputText = computed({\n      get: () => _inputText.value,\n      set(val) {\n        if (val === null || val === '') {\n          model.value = null;\n          _inputText.value = null;\n        } else if (!isNaN(Number(val)) && Number(val) <= props.max && Number(val) >= props.min) {\n          model.value = Number(val);\n          _inputText.value = val;\n        }\n      }\n    });\n    const canIncrease = computed(() => {\n      if (controlsDisabled.value) return false;\n      return (model.value ?? 0) + props.step <= props.max;\n    });\n    const canDecrease = computed(() => {\n      if (controlsDisabled.value) return false;\n      return (model.value ?? 0) - props.step >= props.min;\n    });\n    const controlVariant = computed(() => {\n      return props.hideInput ? 'stacked' : props.controlVariant;\n    });\n    const incrementIcon = computed(() => controlVariant.value === 'split' ? '$plus' : '$collapse');\n    const decrementIcon = computed(() => controlVariant.value === 'split' ? '$minus' : '$expand');\n    const controlNodeSize = computed(() => controlVariant.value === 'split' ? 'default' : 'small');\n    const controlNodeDefaultHeight = computed(() => controlVariant.value === 'stacked' ? 'auto' : '100%');\n    const incrementSlotProps = computed(() => ({\n      props: {\n        onClick: onControlClick,\n        onPointerup: onControlMouseup,\n        onPointerdown: onUpControlMousedown\n      }\n    }));\n    const decrementSlotProps = computed(() => ({\n      props: {\n        onClick: onControlClick,\n        onPointerup: onControlMouseup,\n        onPointerdown: onDownControlMousedown\n      }\n    }));\n    watch(() => props.precision, () => formatInputValue());\n    onMounted(() => {\n      clampModel();\n    });\n    function inferPrecision(value) {\n      if (value == null) return 0;\n      const str = value.toString();\n      const idx = str.indexOf('.');\n      return ~idx ? str.length - idx : 0;\n    }\n    function toggleUpDown() {\n      let increment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (controlsDisabled.value) return;\n      if (model.value == null) {\n        inputText.value = correctPrecision(clamp(0, props.min, props.max));\n        return;\n      }\n      let inferredPrecision = Math.max(inferPrecision(model.value), inferPrecision(props.step));\n      if (props.precision != null) inferredPrecision = Math.max(inferredPrecision, props.precision);\n      if (increment) {\n        if (canIncrease.value) inputText.value = correctPrecision(model.value + props.step, inferredPrecision);\n      } else {\n        if (canDecrease.value) inputText.value = correctPrecision(model.value - props.step, inferredPrecision);\n      }\n    }\n    function onBeforeinput(e) {\n      if (!e.data) return;\n      const existingTxt = e.target?.value;\n      const selectionStart = e.target?.selectionStart;\n      const selectionEnd = e.target?.selectionEnd;\n      const potentialNewInputVal = existingTxt ? existingTxt.slice(0, selectionStart) + e.data + existingTxt.slice(selectionEnd) : e.data;\n      // Only numbers, \"-\", \".\" are allowed\n      // AND \"-\", \".\" are allowed only once\n      // AND \"-\" is only allowed at the start\n      if (!/^-?(\\d+(\\.\\d*)?|(\\.\\d+)|\\d*|\\.)$/.test(potentialNewInputVal)) {\n        e.preventDefault();\n      }\n      if (props.precision == null) return;\n\n      // Ignore decimal digits above precision limit\n      if (potentialNewInputVal.split('.')[1]?.length > props.precision) {\n        e.preventDefault();\n      }\n      // Ignore decimal separator when precision = 0\n      if (props.precision === 0 && potentialNewInputVal.includes('.')) {\n        e.preventDefault();\n      }\n    }\n    async function onKeydown(e) {\n      if (['Enter', 'ArrowLeft', 'ArrowRight', 'Backspace', 'Delete', 'Tab'].includes(e.key) || e.ctrlKey) return;\n      if (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault();\n        clampModel();\n        // _model is controlled, so need to wait until props['modelValue'] is updated\n        await nextTick();\n        if (e.key === 'ArrowDown') {\n          toggleUpDown(false);\n        } else {\n          toggleUpDown();\n        }\n      }\n    }\n    function onControlClick(e) {\n      e.stopPropagation();\n    }\n    function onControlMouseup(e) {\n      const el = e.currentTarget;\n      el?.releasePointerCapture(e.pointerId);\n      e.preventDefault();\n      e.stopPropagation();\n      holdStop();\n    }\n    function onUpControlMousedown(e) {\n      const el = e.currentTarget;\n      el?.setPointerCapture(e.pointerId);\n      e.preventDefault();\n      e.stopPropagation();\n      holdStart('up');\n    }\n    function onDownControlMousedown(e) {\n      const el = e.currentTarget;\n      el?.setPointerCapture(e.pointerId);\n      e.preventDefault();\n      e.stopPropagation();\n      holdStart('down');\n    }\n    function clampModel() {\n      if (controlsDisabled.value) return;\n      if (!vTextFieldRef.value) return;\n      const actualText = vTextFieldRef.value.value;\n      if (actualText && !isNaN(Number(actualText))) {\n        inputText.value = correctPrecision(clamp(Number(actualText), props.min, props.max));\n      } else {\n        inputText.value = null;\n      }\n    }\n    function formatInputValue() {\n      if (controlsDisabled.value) return;\n      if (model.value === null || isNaN(model.value)) {\n        inputText.value = null;\n        return;\n      }\n      inputText.value = props.precision == null ? String(model.value) : model.value.toFixed(props.precision);\n    }\n    function trimDecimalZeros() {\n      if (controlsDisabled.value) return;\n      if (model.value === null || isNaN(model.value)) {\n        inputText.value = null;\n        return;\n      }\n      inputText.value = model.value.toString();\n    }\n    function onFocus() {\n      focus();\n      trimDecimalZeros();\n    }\n    function onBlur() {\n      blur();\n      clampModel();\n    }\n    useRender(() => {\n      const {\n        modelValue: _,\n        ...textFieldProps\n      } = VTextField.filterProps(props);\n      function incrementControlNode() {\n        return !slots.increment ? _createVNode(VBtn, {\n          \"disabled\": !canIncrease.value,\n          \"flat\": true,\n          \"key\": \"increment-btn\",\n          \"height\": controlNodeDefaultHeight.value,\n          \"data-testid\": \"increment\",\n          \"aria-hidden\": \"true\",\n          \"icon\": incrementIcon.value,\n          \"onClick\": onControlClick,\n          \"onPointerup\": onControlMouseup,\n          \"onPointerdown\": onUpControlMousedown,\n          \"size\": controlNodeSize.value,\n          \"tabindex\": \"-1\"\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"increment-defaults\",\n          \"defaults\": {\n            VBtn: {\n              disabled: !canIncrease.value,\n              flat: true,\n              height: controlNodeDefaultHeight.value,\n              size: controlNodeSize.value,\n              icon: incrementIcon.value\n            }\n          }\n        }, {\n          default: () => [slots.increment(incrementSlotProps.value)]\n        });\n      }\n      function decrementControlNode() {\n        return !slots.decrement ? _createVNode(VBtn, {\n          \"disabled\": !canDecrease.value,\n          \"flat\": true,\n          \"key\": \"decrement-btn\",\n          \"height\": controlNodeDefaultHeight.value,\n          \"data-testid\": \"decrement\",\n          \"aria-hidden\": \"true\",\n          \"icon\": decrementIcon.value,\n          \"size\": controlNodeSize.value,\n          \"tabindex\": \"-1\",\n          \"onClick\": onControlClick,\n          \"onPointerup\": onControlMouseup,\n          \"onPointerdown\": onDownControlMousedown\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"decrement-defaults\",\n          \"defaults\": {\n            VBtn: {\n              disabled: !canDecrease.value,\n              flat: true,\n              height: controlNodeDefaultHeight.value,\n              size: controlNodeSize.value,\n              icon: decrementIcon.value\n            }\n          }\n        }, {\n          default: () => [slots.decrement(decrementSlotProps.value)]\n        });\n      }\n      function controlNode() {\n        return _createVNode(\"div\", {\n          \"class\": \"v-number-input__control\"\n        }, [decrementControlNode(), _createVNode(VDivider, {\n          \"vertical\": controlVariant.value !== 'stacked'\n        }, null), incrementControlNode()]);\n      }\n      function dividerNode() {\n        return !props.hideInput && !props.inset ? _createVNode(VDivider, {\n          \"vertical\": true\n        }, null) : undefined;\n      }\n      const appendInnerControl = controlVariant.value === 'split' ? _createVNode(\"div\", {\n        \"class\": \"v-number-input__control\"\n      }, [_createVNode(VDivider, {\n        \"vertical\": true\n      }, null), incrementControlNode()]) : props.reverse || controlVariant.value === 'hidden' ? undefined : _createVNode(_Fragment, null, [dividerNode(), controlNode()]);\n      const hasAppendInner = slots['append-inner'] || appendInnerControl;\n      const prependInnerControl = controlVariant.value === 'split' ? _createVNode(\"div\", {\n        \"class\": \"v-number-input__control\"\n      }, [decrementControlNode(), _createVNode(VDivider, {\n        \"vertical\": true\n      }, null)]) : props.reverse && controlVariant.value !== 'hidden' ? _createVNode(_Fragment, null, [controlNode(), dividerNode()]) : undefined;\n      const hasPrependInner = slots['prepend-inner'] || prependInnerControl;\n      return _createVNode(VTextField, _mergeProps({\n        \"ref\": vTextFieldRef,\n        \"modelValue\": inputText.value,\n        \"onUpdate:modelValue\": $event => inputText.value = $event,\n        \"validationValue\": model.value,\n        \"onBeforeinput\": onBeforeinput,\n        \"onFocus\": onFocus,\n        \"onBlur\": onBlur,\n        \"onKeydown\": onKeydown,\n        \"class\": ['v-number-input', {\n          'v-number-input--default': controlVariant.value === 'default',\n          'v-number-input--hide-input': props.hideInput,\n          'v-number-input--inset': props.inset,\n          'v-number-input--reverse': props.reverse,\n          'v-number-input--split': controlVariant.value === 'split',\n          'v-number-input--stacked': controlVariant.value === 'stacked'\n        }, props.class]\n      }, textFieldProps, {\n        \"style\": props.style,\n        \"inputmode\": \"decimal\"\n      }), {\n        ...slots,\n        'append-inner': hasAppendInner ? function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return _createVNode(_Fragment, null, [slots['append-inner']?.(...args), appendInnerControl]);\n        } : undefined,\n        'prepend-inner': hasPrependInner ? function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n          return _createVNode(_Fragment, null, [prependInnerControl, slots['prepend-inner']?.(...args)]);\n        } : undefined\n      });\n    });\n    return forwardRefs({}, vTextFieldRef);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}