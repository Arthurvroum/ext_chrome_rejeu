{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// Composables\nimport { useProxiedModel } from \"../../../composables/proxiedModel.js\"; // Utilities\nimport { computed, inject, provide, shallowRef } from 'vue';\nimport { deepEqual, propsFactory, wrapInArray } from \"../../../util/index.js\"; // Types\nconst singleSelectStrategy = {\n  showSelectAll: false,\n  allSelected: () => [],\n  select: _ref => {\n    let {\n      items,\n      value\n    } = _ref;\n    return new Set(value ? [items[0]?.value] : []);\n  },\n  selectAll: _ref2 => {\n    let {\n      selected\n    } = _ref2;\n    return selected;\n  }\n};\nconst pageSelectStrategy = {\n  showSelectAll: true,\n  allSelected: _ref3 => {\n    let {\n      currentPage\n    } = _ref3;\n    return currentPage;\n  },\n  select: _ref4 => {\n    let {\n      items,\n      value,\n      selected\n    } = _ref4;\n    for (const item of items) {\n      if (value) selected.add(item.value);else selected.delete(item.value);\n    }\n    return selected;\n  },\n  selectAll: _ref5 => {\n    let {\n      value,\n      currentPage,\n      selected\n    } = _ref5;\n    return pageSelectStrategy.select({\n      items: currentPage,\n      value,\n      selected\n    });\n  }\n};\nconst allSelectStrategy = {\n  showSelectAll: true,\n  allSelected: _ref6 => {\n    let {\n      allItems\n    } = _ref6;\n    return allItems;\n  },\n  select: _ref7 => {\n    let {\n      items,\n      value,\n      selected\n    } = _ref7;\n    for (const item of items) {\n      if (value) selected.add(item.value);else selected.delete(item.value);\n    }\n    return selected;\n  },\n  selectAll: _ref8 => {\n    let {\n      value,\n      allItems,\n      selected\n    } = _ref8;\n    return allSelectStrategy.select({\n      items: allItems,\n      value,\n      selected\n    });\n  }\n};\nexport const makeDataTableSelectProps = propsFactory({\n  showSelect: Boolean,\n  selectStrategy: {\n    type: [String, Object],\n    default: 'page'\n  },\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  }\n}, 'DataTable-select');\nexport const VDataTableSelectionSymbol = Symbol.for('vuetify:data-table-selection');\nexport function provideSelection(props, _ref9) {\n  let {\n    allItems,\n    currentPage\n  } = _ref9;\n  const selected = useProxiedModel(props, 'modelValue', props.modelValue, v => {\n    return new Set(wrapInArray(v).map(v => {\n      return allItems.value.find(item => props.valueComparator(v, item.value))?.value ?? v;\n    }));\n  }, v => {\n    return [...v.values()];\n  });\n  const allSelectable = computed(() => allItems.value.filter(item => item.selectable));\n  const currentPageSelectable = computed(() => currentPage.value.filter(item => item.selectable));\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy;\n    switch (props.selectStrategy) {\n      case 'single':\n        return singleSelectStrategy;\n      case 'all':\n        return allSelectStrategy;\n      case 'page':\n      default:\n        return pageSelectStrategy;\n    }\n  });\n  const lastSelectedIndex = shallowRef(null);\n  function isSelected(items) {\n    return wrapInArray(items).every(item => selected.value.has(item.value));\n  }\n  function isSomeSelected(items) {\n    return wrapInArray(items).some(item => selected.value.has(item.value));\n  }\n  function select(items, value) {\n    const newSelected = selectStrategy.value.select({\n      items,\n      value,\n      selected: new Set(selected.value)\n    });\n    selected.value = newSelected;\n  }\n  function toggleSelect(item, index, event) {\n    const items = [];\n    index = index ?? currentPage.value.findIndex(i => i.value === item.value);\n    if (props.selectStrategy !== 'single' && event?.shiftKey && lastSelectedIndex.value !== null) {\n      const [start, end] = [lastSelectedIndex.value, index].sort((a, b) => a - b);\n      items.push(...currentPage.value.slice(start, end + 1));\n    } else {\n      items.push(item);\n      lastSelectedIndex.value = index;\n    }\n    select(items, !isSelected([item]));\n  }\n  function selectAll(value) {\n    const newSelected = selectStrategy.value.selectAll({\n      value,\n      allItems: allSelectable.value,\n      currentPage: currentPageSelectable.value,\n      selected: new Set(selected.value)\n    });\n    selected.value = newSelected;\n  }\n  const someSelected = computed(() => selected.value.size > 0);\n  const allSelected = computed(() => {\n    const items = selectStrategy.value.allSelected({\n      allItems: allSelectable.value,\n      currentPage: currentPageSelectable.value\n    });\n    return !!items.length && isSelected(items);\n  });\n  const showSelectAll = computed(() => selectStrategy.value.showSelectAll);\n  const data = {\n    toggleSelect,\n    select,\n    selectAll,\n    isSelected,\n    isSomeSelected,\n    someSelected,\n    allSelected,\n    showSelectAll,\n    lastSelectedIndex,\n    selectStrategy\n  };\n  provide(VDataTableSelectionSymbol, data);\n  return data;\n}\nexport function useSelection() {\n  const data = inject(VDataTableSelectionSymbol);\n  if (!data) throw new Error('Missing selection!');\n  return data;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}