{"ast":null,"code":"import { unref as _unref, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, withCtx as _withCtx, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"steps-list-container\"\n};\nconst _hoisted_2 = {\n  class: \"steps-scrollable-container\"\n};\nimport { ref, computed, watch, onMounted } from 'vue';\nimport useStepResults from '@/composables/useStepResults';\nimport useSteps from '@/composables/useSteps';\nimport useVariables from '@/composables/useVariables';\n\n// Imports des sous-composants\nimport StepsHeader from './steps/StepsHeader.vue';\nimport StepsResultsSummary from './steps/StepsResultsSummary.vue';\nimport StepItem from './steps/StepItem.vue';\nimport StepVariableModals from './steps/StepVariableModals.vue';\n\n// Définition des props\n\nexport default {\n  __name: 'StepsList',\n  props: {\n    steps: {\n      type: Array,\n      required: true\n    },\n    results: {\n      type: Object,\n      default: () => ({})\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    currentStepIndex: {\n      type: Number,\n      default: -1\n    },\n    activeTabs: {\n      type: Object,\n      default: () => ({})\n    },\n    executionOptions: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['toggle-all-steps', 'export-results', 'generate-pdf', 'update-step', 'tab-change', 'add-capture', 'add-substitution', 'remove-capture', 'remove-substitution'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    // Imports des composables pour la gestion des données et logique métier\n    const props = __props;\n\n    // Définition des événements émis\n    const emit = __emit;\n\n    // État local du composant\n    const expandedStep = ref(-1);\n    const localActiveTabs = ref({\n      ...props.activeTabs\n    });\n    const showCaptureDialog = ref(false);\n    const showSubstitutionDialog = ref(false);\n    const currentStepIndex = ref(-1);\n    const captureForm = ref({\n      name: '',\n      source: 'body',\n      selector: '',\n      value: '',\n      description: ''\n    });\n    const substitutionForm = ref({\n      target: 'body',\n      selector: '',\n      variable: '',\n      description: ''\n    });\n\n    // Utilisation des composables\n    const {\n      successCount,\n      errorCount,\n      skippedCount,\n      hasResults\n    } = useStepResults(props);\n    const {\n      toggleStep,\n      updateStepEnabled\n    } = useSteps(props, emit);\n    const {\n      availableVariables,\n      captureSourceOptions,\n      availableStepsForVariables,\n      saveCapture,\n      saveSubstitution,\n      removeCapture,\n      removeSubstitution\n    } = useVariables(props, emit);\n\n    // Gestionnaires d'événements\n    function handleTabChange(index, tab) {\n      localActiveTabs.value[index] = tab;\n      emit('tab-change', {\n        index,\n        tab\n      });\n    }\n    function openCaptureDialog(index) {\n      currentStepIndex.value = index;\n      // Réinitialisation du formulaire\n      captureForm.value = {\n        name: '',\n        source: 'body',\n        selector: '',\n        value: '',\n        description: ''\n      };\n      showCaptureDialog.value = true;\n    }\n    function openSubstitutionDialog(index) {\n      currentStepIndex.value = index;\n      // Réinitialisation du formulaire\n      substitutionForm.value = {\n        target: 'body',\n        selector: '',\n        variable: '',\n        description: ''\n      };\n      showSubstitutionDialog.value = true;\n    }\n\n    // Synchronisation des onglets actifs avec les props\n    watch(() => props.activeTabs, newTabs => {\n      if (newTabs) {\n        localActiveTabs.value = {\n          ...newTabs\n        };\n      }\n    });\n\n    // Initialisation\n    onMounted(() => {\n      // Logique d'initialisation si nécessaire\n    });\n    return (_ctx, _cache) => {\n      const _component_v_divider = _resolveComponent(\"v-divider\");\n      const _component_v_list = _resolveComponent(\"v-list\");\n      const _component_v_card = _resolveComponent(\"v-card\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_v_card, {\n        class: \"mb-4 steps-list-card\",\n        variant: \"outlined\"\n      }, {\n        default: _withCtx(() => [_createVNode(StepsHeader, {\n          \"has-results\": _unref(hasResults),\n          onToggleAllSteps: _cache[0] || (_cache[0] = $event => _ctx.$emit('toggle-all-steps', $event)),\n          onExportResults: _cache[1] || (_cache[1] = $event => _ctx.$emit('export-results')),\n          onGeneratePdf: _cache[2] || (_cache[2] = $event => _ctx.$emit('generate-pdf'))\n        }, null, 8, [\"has-results\"]), _unref(hasResults) ? (_openBlock(), _createBlock(StepsResultsSummary, {\n          key: 0,\n          steps: __props.steps,\n          \"success-count\": _unref(successCount),\n          \"error-count\": _unref(errorCount),\n          \"skipped-count\": _unref(skippedCount)\n        }, null, 8, [\"steps\", \"success-count\", \"error-count\", \"skipped-count\"])) : _createCommentVNode(\"\", true), _createVNode(_component_v_divider), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_v_list, {\n          class: \"steps-list\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.steps, (step, index) => {\n            return _openBlock(), _createBlock(StepItem, {\n              key: index,\n              step: step,\n              index: index,\n              expanded: expandedStep.value === index,\n              \"is-replaying\": __props.isReplaying,\n              \"current-step-index\": currentStepIndex.value,\n              results: __props.results,\n              \"execution-options\": __props.executionOptions,\n              \"active-tab\": localActiveTabs.value[index] || 'details',\n              onToggle: $event => _unref(toggleStep)(index),\n              onUpdateStep: $event => _unref(updateStepEnabled)(index, $event),\n              onTabChange: $event => handleTabChange(index, $event),\n              onOpenCaptureDialog: $event => openCaptureDialog(index),\n              onOpenSubstitutionDialog: $event => openSubstitutionDialog(index),\n              onRemoveCapture: $event => _unref(removeCapture)(index, $event),\n              onRemoveSubstitution: $event => _unref(removeSubstitution)(index, $event)\n            }, null, 8, [\"step\", \"index\", \"expanded\", \"is-replaying\", \"current-step-index\", \"results\", \"execution-options\", \"active-tab\", \"onToggle\", \"onUpdateStep\", \"onTabChange\", \"onOpenCaptureDialog\", \"onOpenSubstitutionDialog\", \"onRemoveCapture\", \"onRemoveSubstitution\"]);\n          }), 128))]),\n          _: 1\n        })])]),\n        _: 1\n      }), _createVNode(StepVariableModals, {\n        \"show-capture-dialog\": showCaptureDialog.value,\n        \"onUpdate:showCaptureDialog\": _cache[3] || (_cache[3] = $event => showCaptureDialog.value = $event),\n        \"show-substitution-dialog\": showSubstitutionDialog.value,\n        \"onUpdate:showSubstitutionDialog\": _cache[4] || (_cache[4] = $event => showSubstitutionDialog.value = $event),\n        \"capture-form\": captureForm.value,\n        \"substitution-form\": substitutionForm.value,\n        \"capture-source-options\": _unref(captureSourceOptions),\n        \"available-steps\": _unref(availableStepsForVariables),\n        \"available-variables\": _unref(availableVariables),\n        onSaveCapture: _unref(saveCapture),\n        onSaveSubstitution: _unref(saveSubstitution)\n      }, null, 8, [\"show-capture-dialog\", \"show-substitution-dialog\", \"capture-form\", \"substitution-form\", \"capture-source-options\", \"available-steps\", \"available-variables\", \"onSaveCapture\", \"onSaveSubstitution\"])]);\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}