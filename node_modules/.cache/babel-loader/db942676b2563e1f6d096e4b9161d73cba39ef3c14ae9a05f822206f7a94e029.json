{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// Utilities\nimport { computed, inject, provide, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { createRange, darken, getCurrentInstance, getForeground, getLuma, IN_BROWSER, lighten, mergeDeep, parseColor, propsFactory, RGBtoHex } from \"../util/index.js\"; // Types\nexport const ThemeSymbol = Symbol.for('vuetify:theme');\nexport const makeThemeProps = propsFactory({\n  theme: String\n}, 'theme');\nfunction genDefaults() {\n  return {\n    defaultTheme: 'light',\n    variations: {\n      colors: [],\n      lighten: 0,\n      darken: 0\n    },\n    themes: {\n      light: {\n        dark: false,\n        colors: {\n          background: '#FFFFFF',\n          surface: '#FFFFFF',\n          'surface-bright': '#FFFFFF',\n          'surface-light': '#EEEEEE',\n          'surface-variant': '#424242',\n          'on-surface-variant': '#EEEEEE',\n          primary: '#1867C0',\n          'primary-darken-1': '#1F5592',\n          secondary: '#48A9A6',\n          'secondary-darken-1': '#018786',\n          error: '#B00020',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00'\n        },\n        variables: {\n          'border-color': '#000000',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 0.87,\n          'medium-emphasis-opacity': 0.60,\n          'disabled-opacity': 0.38,\n          'idle-opacity': 0.04,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.12,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#212529',\n          'theme-on-kbd': '#FFFFFF',\n          'theme-code': '#F5F5F5',\n          'theme-on-code': '#000000'\n        }\n      },\n      dark: {\n        dark: true,\n        colors: {\n          background: '#121212',\n          surface: '#212121',\n          'surface-bright': '#ccbfd6',\n          'surface-light': '#424242',\n          'surface-variant': '#a3a3a3',\n          'on-surface-variant': '#424242',\n          primary: '#2196F3',\n          'primary-darken-1': '#277CC1',\n          secondary: '#54B6B2',\n          'secondary-darken-1': '#48A9A6',\n          error: '#CF6679',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00'\n        },\n        variables: {\n          'border-color': '#FFFFFF',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 1,\n          'medium-emphasis-opacity': 0.70,\n          'disabled-opacity': 0.50,\n          'idle-opacity': 0.10,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.16,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#212529',\n          'theme-on-kbd': '#FFFFFF',\n          'theme-code': '#343434',\n          'theme-on-code': '#CCCCCC'\n        }\n      }\n    },\n    stylesheetId: 'vuetify-theme-stylesheet'\n  };\n}\nfunction parseThemeOptions() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : genDefaults();\n  const defaults = genDefaults();\n  if (!options) return {\n    ...defaults,\n    isDisabled: true\n  };\n  const themes = {};\n  for (const [key, theme] of Object.entries(options.themes ?? {})) {\n    const defaultTheme = theme.dark || key === 'dark' ? defaults.themes?.dark : defaults.themes?.light;\n    themes[key] = mergeDeep(defaultTheme, theme);\n  }\n  return mergeDeep(defaults, {\n    ...options,\n    themes\n  });\n}\nfunction createCssClass(lines, selector, content, scope) {\n  lines.push(`${getScopedSelector(selector, scope)} {\\n`, ...content.map(line => `  ${line};\\n`), '}\\n');\n}\nfunction genCssVariables(theme) {\n  const lightOverlay = theme.dark ? 2 : 1;\n  const darkOverlay = theme.dark ? 1 : 2;\n  const variables = [];\n  for (const [key, value] of Object.entries(theme.colors)) {\n    const rgb = parseColor(value);\n    variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`);\n    if (!key.startsWith('on-')) {\n      variables.push(`--v-theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`);\n    }\n  }\n  for (const [key, value] of Object.entries(theme.variables)) {\n    const color = typeof value === 'string' && value.startsWith('#') ? parseColor(value) : undefined;\n    const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined;\n    variables.push(`--v-${key}: ${rgb ?? value}`);\n  }\n  return variables;\n}\nfunction genVariation(name, color, variations) {\n  const object = {};\n  if (variations) {\n    for (const variation of ['lighten', 'darken']) {\n      const fn = variation === 'lighten' ? lighten : darken;\n      for (const amount of createRange(variations[variation], 1)) {\n        object[`${name}-${variation}-${amount}`] = RGBtoHex(fn(parseColor(color), amount));\n      }\n    }\n  }\n  return object;\n}\nfunction genVariations(colors, variations) {\n  if (!variations) return {};\n  let variationColors = {};\n  for (const name of variations.colors) {\n    const color = colors[name];\n    if (!color) continue;\n    variationColors = {\n      ...variationColors,\n      ...genVariation(name, color, variations)\n    };\n  }\n  return variationColors;\n}\nfunction genOnColors(colors) {\n  const onColors = {};\n  for (const color of Object.keys(colors)) {\n    if (color.startsWith('on-') || colors[`on-${color}`]) continue;\n    const onColor = `on-${color}`;\n    const colorVal = parseColor(colors[color]);\n    onColors[onColor] = getForeground(colorVal);\n  }\n  return onColors;\n}\nfunction getScopedSelector(selector, scope) {\n  if (!scope) return selector;\n  const scopeSelector = `:where(${scope})`;\n  return selector === ':root' ? scopeSelector : `${scopeSelector} ${selector}`;\n}\nfunction upsertStyles(styleEl, styles) {\n  if (!styleEl) return;\n  styleEl.innerHTML = styles;\n}\nfunction getOrCreateStyleElement(id, cspNonce) {\n  if (!IN_BROWSER) return null;\n  let style = document.getElementById(id);\n  if (!style) {\n    style = document.createElement('style');\n    style.id = id;\n    style.type = 'text/css';\n    if (cspNonce) style.setAttribute('nonce', cspNonce);\n    document.head.appendChild(style);\n  }\n  return style;\n}\n\n// Composables\nexport function createTheme(options) {\n  const parsedOptions = parseThemeOptions(options);\n  const name = shallowRef(parsedOptions.defaultTheme);\n  const themes = ref(parsedOptions.themes);\n  const computedThemes = computed(() => {\n    const acc = {};\n    for (const [name, original] of Object.entries(themes.value)) {\n      const colors = {\n        ...original.colors,\n        ...genVariations(original.colors, parsedOptions.variations)\n      };\n      acc[name] = {\n        ...original,\n        colors: {\n          ...colors,\n          ...genOnColors(colors)\n        }\n      };\n    }\n    return acc;\n  });\n  const current = computed(() => computedThemes.value[name.value]);\n  const styles = computed(() => {\n    const lines = [];\n    if (current.value?.dark) {\n      createCssClass(lines, ':root', ['color-scheme: dark'], parsedOptions.scope);\n    }\n    createCssClass(lines, ':root', genCssVariables(current.value), parsedOptions.scope);\n    for (const [themeName, theme] of Object.entries(computedThemes.value)) {\n      createCssClass(lines, `.v-theme--${themeName}`, [`color-scheme: ${theme.dark ? 'dark' : 'normal'}`, ...genCssVariables(theme)], parsedOptions.scope);\n    }\n    const bgLines = [];\n    const fgLines = [];\n    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)));\n    for (const key of colors) {\n      if (key.startsWith('on-')) {\n        createCssClass(fgLines, `.${key}`, [`color: rgb(var(--v-theme-${key})) !important`], parsedOptions.scope);\n      } else {\n        createCssClass(bgLines, `.bg-${key}`, [`--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`, `background-color: rgb(var(--v-theme-${key})) !important`, `color: rgb(var(--v-theme-on-${key})) !important`], parsedOptions.scope);\n        createCssClass(fgLines, `.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`], parsedOptions.scope);\n        createCssClass(fgLines, `.border-${key}`, [`--v-border-color: var(--v-theme-${key})`], parsedOptions.scope);\n      }\n    }\n    lines.push(...bgLines, ...fgLines);\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('');\n  });\n  function install(app) {\n    if (parsedOptions.isDisabled) return;\n    const head = app._context.provides.usehead;\n    if (head) {\n      function getHead() {\n        return {\n          style: [{\n            textContent: styles.value,\n            id: parsedOptions.stylesheetId,\n            nonce: parsedOptions.cspNonce || false\n          }]\n        };\n      }\n      if (head.push) {\n        const entry = head.push(getHead);\n        if (IN_BROWSER) {\n          watch(styles, () => {\n            entry.patch(getHead);\n          });\n        }\n      } else {\n        if (IN_BROWSER) {\n          head.addHeadObjs(computed(getHead));\n          watchEffect(() => head.updateDOM());\n        } else {\n          head.addHeadObjs(getHead());\n        }\n      }\n    } else {\n      if (IN_BROWSER) {\n        watch(styles, updateStyles, {\n          immediate: true\n        });\n      } else {\n        updateStyles();\n      }\n      function updateStyles() {\n        upsertStyles(getOrCreateStyleElement(parsedOptions.stylesheetId, parsedOptions.cspNonce), styles.value);\n      }\n    }\n  }\n  const themeClasses = computed(() => parsedOptions.isDisabled ? undefined : `v-theme--${name.value}`);\n  return {\n    install,\n    isDisabled: parsedOptions.isDisabled,\n    name,\n    themes,\n    current,\n    computedThemes,\n    themeClasses,\n    styles,\n    global: {\n      name,\n      current\n    }\n  };\n}\nexport function provideTheme(props) {\n  getCurrentInstance('provideTheme');\n  const theme = inject(ThemeSymbol, null);\n  if (!theme) throw new Error('Could not find Vuetify theme injection');\n  const name = computed(() => props.theme ?? theme.name.value);\n  const current = computed(() => theme.themes.value[name.value]);\n  const themeClasses = computed(() => theme.isDisabled ? undefined : `v-theme--${name.value}`);\n  const newTheme = {\n    ...theme,\n    name,\n    current,\n    themeClasses\n  };\n  provide(ThemeSymbol, newTheme);\n  return newTheme;\n}\nexport function useTheme() {\n  getCurrentInstance('useTheme');\n  const theme = inject(ThemeSymbol, null);\n  if (!theme) throw new Error('Could not find Vuetify theme injection');\n  return theme;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}