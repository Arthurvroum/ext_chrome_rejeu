{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"record-tab\"\n};\nconst _hoisted_2 = {\n  class: \"content-container\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"request-list\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"empty-state\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_record_controls = _resolveComponent(\"record-controls\");\n  const _component_replay_option = _resolveComponent(\"replay-option\");\n  const _component_warning_message = _resolveComponent(\"warning-message\");\n  const _component_request_item = _resolveComponent(\"request-item\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_record_controls, {\n    \"is-recording\": $data.isRecording,\n    \"recorded-count\": $data.recordedCount,\n    status: $data.recordingStatus,\n    \"has-recorded-data\": $options.hasRecordedData,\n    disabled: $data.restrictedUrlWarning,\n    onToggleRecording: $options.toggleRecording,\n    onExportRecording: $options.exportRecording,\n    onClearRecordings: $options.clearRecordings\n  }, null, 8, [\"is-recording\", \"recorded-count\", \"status\", \"has-recorded-data\", \"disabled\", \"onToggleRecording\", \"onExportRecording\", \"onClearRecordings\"]), _createVNode(_component_replay_option, {\n    show: $data.showReplayOption,\n    \"request-count\": $data.recordedRequests.length,\n    onOpenReplay: $options.openReplayInNewTab\n  }, null, 8, [\"show\", \"request-count\", \"onOpenReplay\"]), $data.restrictedUrlWarning ? (_openBlock(), _createBlock(_component_warning_message, {\n    key: 0,\n    title: \"Cannot record from this page\",\n    message: \"Recording is not possible on browser internal pages or extension pages. Please navigate to a regular website to use recording features.\"\n  })) : _createCommentVNode(\"\", true), $options.hasRecordedData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h3\", null, \"Recorded Requests (\" + _toDisplayString($data.recordedRequests.length) + \")\", 1), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.recordedRequests, (request, index) => {\n    return _openBlock(), _createBlock(_component_request_item, {\n      key: index,\n      request: request,\n      expanded: $data.expandedRequest === index,\n      onToggleDetails: $event => $options.toggleDetails(index),\n      onUpdateRequest: $event => $options.updateRequest(index, $event)\n    }, null, 8, [\"request\", \"expanded\", \"onToggleDetails\", \"onUpdateRequest\"]);\n  }), 128))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"No requests recorded yet. Click \\\"Start Recording\\\" to begin capturing HTTP requests.\", -1)])))])]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}