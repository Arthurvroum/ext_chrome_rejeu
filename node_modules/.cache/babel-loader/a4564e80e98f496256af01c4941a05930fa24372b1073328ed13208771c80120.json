{"ast":null,"code":"import { ref, watch } from 'vue';\nimport StepDetails from './StepDetails.vue';\nexport default {\n  name: 'StepItem',\n  components: {\n    StepDetails\n  },\n  props: {\n    step: {\n      type: Object,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    },\n    results: {\n      type: Object,\n      default: null\n    },\n    currentStepIndex: {\n      type: Number,\n      default: -1\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    progressStatus: {\n      type: String,\n      default: null\n    },\n    expanded: {\n      type: Boolean,\n      default: false\n    },\n    executionOptions: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['toggle-step', 'update-step', 'open-capture-dialog', 'open-substitution-dialog'],\n  setup(props, {\n    emit\n  }) {\n    const localEnabled = ref(props.step.enabled);\n    const captureSourceOptions = [{\n      title: 'Corps de la réponse',\n      value: 'body'\n    }, {\n      title: 'En-têtes de la réponse',\n      value: 'headers'\n    }, {\n      title: 'URL de la réponse',\n      value: 'url'\n    }];\n\n    // Watch for props changes\n    watch(() => props.step.enabled, newValue => {\n      localEnabled.value = newValue;\n    });\n\n    // Methods\n    const updateStepEnabled = () => {\n      emit('update-step', {\n        enabled: localEnabled.value,\n        skip: !localEnabled.value\n      });\n    };\n    const updateChildStep = updatedData => {\n      emit('update-step', {\n        ...updatedData\n      });\n    };\n    const getMethodColor = method => {\n      const colors = {\n        GET: 'primary',\n        POST: 'success',\n        PUT: 'warning',\n        DELETE: 'error',\n        PATCH: 'info'\n      };\n      return colors[method] || 'grey';\n    };\n    const getStepResultStatus = () => {\n      // Check real-time progress status first\n      if (props.progressStatus) {\n        return props.progressStatus;\n      }\n\n      // Otherwise use final result\n      if (!props.results) return null;\n      if (props.results.error) return 'error';\n      return 'success';\n    };\n    const hasResultError = () => {\n      return props.results && props.results.status === 'error' && props.results.error;\n    };\n    const getResultError = () => {\n      if (!hasResultError()) return '';\n      return props.results.error;\n    };\n    const getStatusColor = status => {\n      if (status === 'success') return 'success';\n      if (status === 'error') return 'error';\n      if (status === 'skipped') return 'warning';\n      if (status === 'in-progress') return 'info';\n      return 'grey';\n    };\n    const getStatusIcon = status => {\n      if (status === 'success') return 'mdi-check';\n      if (status === 'error') return 'mdi-close';\n      if (status === 'skipped') return 'mdi-skip-next';\n      if (status === 'in-progress') return 'mdi-loading';\n      return 'mdi-help';\n    };\n    return {\n      localEnabled,\n      captureSourceOptions,\n      updateStepEnabled,\n      updateChildStep,\n      getMethodColor,\n      getStepResultStatus,\n      hasResultError,\n      getResultError,\n      getStatusColor,\n      getStatusIcon\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}