{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nimport { Fragment as _Fragment, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VBtn } from \"../VBtn/index.js\"; // Composables\nimport { useLocale } from \"../../composables/index.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\nimport { computed, ref, toRaw, watchEffect } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\nexport const makeVConfirmEditProps = propsFactory({\n  modelValue: null,\n  color: String,\n  cancelText: {\n    type: String,\n    default: '$vuetify.confirmEdit.cancel'\n  },\n  okText: {\n    type: String,\n    default: '$vuetify.confirmEdit.ok'\n  },\n  disabled: {\n    type: [Boolean, Array],\n    default: undefined\n  },\n  hideActions: Boolean\n}, 'VConfirmEdit');\nexport const VConfirmEdit = genericComponent()({\n  name: 'VConfirmEdit',\n  props: makeVConfirmEditProps(),\n  emits: {\n    cancel: () => true,\n    save: value => true,\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const internalModel = ref();\n    watchEffect(() => {\n      internalModel.value = structuredClone(toRaw(model.value));\n    });\n    const {\n      t\n    } = useLocale();\n    const isPristine = computed(() => {\n      return deepEqual(model.value, internalModel.value);\n    });\n    function isActionDisabled(action) {\n      if (typeof props.disabled === 'boolean') {\n        return props.disabled;\n      }\n      if (Array.isArray(props.disabled)) {\n        return props.disabled.includes(action);\n      }\n      return isPristine.value;\n    }\n    const isSaveDisabled = computed(() => isActionDisabled('save'));\n    const isCancelDisabled = computed(() => isActionDisabled('cancel'));\n    function save() {\n      model.value = internalModel.value;\n      emit('save', internalModel.value);\n    }\n    function cancel() {\n      internalModel.value = structuredClone(toRaw(model.value));\n      emit('cancel');\n    }\n    function actions(actionsProps) {\n      return _createVNode(_Fragment, null, [_createVNode(VBtn, _mergeProps({\n        \"disabled\": isCancelDisabled.value,\n        \"variant\": \"text\",\n        \"color\": props.color,\n        \"onClick\": cancel,\n        \"text\": t(props.cancelText)\n      }, actionsProps), null), _createVNode(VBtn, _mergeProps({\n        \"disabled\": isSaveDisabled.value,\n        \"variant\": \"text\",\n        \"color\": props.color,\n        \"onClick\": save,\n        \"text\": t(props.okText)\n      }, actionsProps), null)]);\n    }\n    let actionsUsed = false;\n    useRender(() => {\n      return _createVNode(_Fragment, null, [slots.default?.({\n        model: internalModel,\n        save,\n        cancel,\n        isPristine: isPristine.value,\n        get actions() {\n          actionsUsed = true;\n          return actions;\n        }\n      }), !props.hideActions && !actionsUsed && actions()]);\n    });\n    return {\n      save,\n      cancel,\n      isPristine\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}