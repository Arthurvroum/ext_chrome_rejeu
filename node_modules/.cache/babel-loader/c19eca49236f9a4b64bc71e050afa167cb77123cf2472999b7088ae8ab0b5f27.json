{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed } from 'vue';\nexport default function useSteps(steps, results, executionOptions) {\n  const expandedStep = ref(null);\n  const localActiveTabs = ref({});\n\n  // Computed properties for step statuses\n  const successCount = computed(() => {\n    if (!results.value) return 0;\n    return Object.values(results.value).filter(result => result.status === 'success').length;\n  });\n  const errorCount = computed(() => {\n    if (!results.value) return 0;\n    return Object.values(results.value).filter(result => result.status === 'error').length;\n  });\n  const skippedCount = computed(() => {\n    if (!results.value) return 0;\n    return steps.value.filter(step => step.skip).length;\n  });\n  const hasResults = computed(() => {\n    return results.value && Object.keys(results.value).length > 0;\n  });\n\n  // Functions for step management\n  function toggleStep(index) {\n    expandedStep.value = expandedStep.value === index ? null : index;\n    // Initialize the active tab if not already set\n    if (!localActiveTabs.value[index]) {\n      localActiveTabs.value[index] = 'details';\n    }\n  }\n  function updateStepEnabled(index, enabled) {\n    steps.value[index].skip = !enabled;\n    // Additional logic if needed\n  }\n  function getModifiedUrl(url, baseUrl) {\n    if (!baseUrl || !url) return url;\n    try {\n      const originalUrl = new URL(url);\n      const newBase = new URL(baseUrl);\n      originalUrl.protocol = newBase.protocol;\n      originalUrl.host = newBase.host;\n\n      // Handle path prefix if the baseUrl includes a path\n      if (newBase.pathname !== '/') {\n        // Remove trailing slash from baseUrl path\n        const basePath = newBase.pathname.endsWith('/') ? newBase.pathname.slice(0, -1) : newBase.pathname;\n\n        // We need to handle the case where the original URL might already include the same path\n        // This is simplistic and might need enhancement for more complex cases\n        if (!originalUrl.pathname.startsWith(basePath)) {\n          originalUrl.pathname = basePath + originalUrl.pathname;\n        }\n      }\n      return originalUrl.toString();\n    } catch (error) {\n      console.error('Error modifying URL:', error);\n      return url;\n    }\n  }\n\n  // Method color mapping\n  function getMethodColor(method) {\n    const methodColors = {\n      GET: 'blue',\n      POST: 'green',\n      PUT: 'orange',\n      PATCH: 'purple',\n      DELETE: 'red',\n      HEAD: 'grey',\n      OPTIONS: 'grey-darken-1'\n    };\n    return methodColors[method] || 'grey';\n  }\n\n  // Status helpers\n  function getStatusColor(status) {\n    const statusColors = {\n      success: 'success',\n      error: 'error',\n      warning: 'warning',\n      info: 'info',\n      skipped: 'grey'\n    };\n    return statusColors[status] || 'grey';\n  }\n  function getStatusIcon(status) {\n    const statusIcons = {\n      success: 'mdi-check',\n      error: 'mdi-close',\n      warning: 'mdi-alert',\n      info: 'mdi-information',\n      skipped: 'mdi-skip-next'\n    };\n    return statusIcons[status] || 'mdi-help';\n  }\n  function getStepResultStatus(index) {\n    if (!results.value || !results.value[index]) return null;\n    return results.value[index].status || null;\n  }\n  function hasResult(index) {\n    return results.value && results.value[index] !== undefined;\n  }\n  function hasResultError(index) {\n    return hasResult(index) && results.value[index].status === 'error' && results.value[index].error;\n  }\n  function getResultError(index) {\n    if (hasResultError(index)) {\n      return results.value[index].error;\n    }\n    return null;\n  }\n  return {\n    expandedStep,\n    localActiveTabs,\n    successCount,\n    errorCount,\n    skippedCount,\n    hasResults,\n    toggleStep,\n    updateStepEnabled,\n    getModifiedUrl,\n    getMethodColor,\n    getStatusColor,\n    getStatusIcon,\n    getStepResultStatus,\n    hasResult,\n    hasResultError,\n    getResultError\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}