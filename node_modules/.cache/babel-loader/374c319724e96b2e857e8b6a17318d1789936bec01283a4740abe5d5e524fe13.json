{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref } from 'vue';\nexport function useVariableSubstitution(props, emit) {\n  const showSubstitutionDialog = ref(false);\n  const substitutionForm = ref({\n    regex: '',\n    mode: 'variable',\n    sourceStep: null,\n    targetVariable: '',\n    value: ''\n  });\n  const substitutionStepIndex = ref(null);\n\n  /**\n   * Open the substitution dialog for a specific step\n   * @param {Number} stepIndex - Index of the step\n   */\n  const openSubstitutionDialog = stepIndex => {\n    // Log pour debug\n    console.log('Opening substitution dialog for step', stepIndex);\n    substitutionForm.value = {\n      regex: '',\n      mode: 'variable',\n      sourceStep: null,\n      targetVariable: '',\n      value: ''\n    };\n    substitutionStepIndex.value = stepIndex;\n    showSubstitutionDialog.value = true;\n  };\n\n  /**\n   * Save a new substitution to the step\n   * @param {Object} formData - The form data to save\n   */\n  const saveSubstitution = formData => {\n    console.log('saveSubstitution called with:', formData);\n    if (!formData || !formData.regex) {\n      console.error('Invalid form data:', formData);\n      return;\n    }\n    const stepIndex = substitutionStepIndex.value;\n    if (stepIndex === null || stepIndex === undefined) {\n      console.error('No step index specified for substitution, substitutionStepIndex is:', substitutionStepIndex.value);\n      return;\n    }\n    if (!props.steps || !props.steps[stepIndex]) {\n      console.error(`Step at index ${stepIndex} not found. Steps:`, props.steps);\n      return;\n    }\n    const step = props.steps[stepIndex];\n    const substitutions = Array.isArray(step.variableSubstitutions) ? [...step.variableSubstitutions] : [];\n\n    // Create substitution structure based on selected mode\n    let newSubstitution = {\n      regex: formData.regex\n    };\n    if (formData.mode === 'variable') {\n      // Variable mode: use a previously captured variable\n      if (formData.sourceStep === null || !formData.targetVariable) {\n        console.error('Missing sourceStep or targetVariable for variable substitution');\n        return;\n      }\n      newSubstitution = {\n        ...newSubstitution,\n        mode: 'variable',\n        targetVariable: formData.targetVariable,\n        sourceStep: formData.sourceStep\n      };\n      console.log('[SUBSTITUTION] Adding variable substitution:', `regex=${newSubstitution.regex}, ` + `targetVariable=${newSubstitution.targetVariable}`);\n    } else {\n      // Fixed value mode\n      if (!formData.value) {\n        console.error('Missing fixed value for substitution');\n        return;\n      }\n      newSubstitution = {\n        ...newSubstitution,\n        mode: 'fixed',\n        value: formData.value\n      };\n      console.log('[SUBSTITUTION] Adding fixed value substitution:', `regex=${newSubstitution.regex}, ` + `value=${newSubstitution.value}`);\n    }\n    const updatedSubstitutions = [...substitutions, newSubstitution];\n\n    // Logs détaillés pour le débogage\n    console.log('[SUBSTITUTION] Current substitutions:', substitutions);\n    console.log('[SUBSTITUTION] Substitutions state after adding:', updatedSubstitutions);\n\n    // Créer un nouvel objet step avec les substitutions mises à jour\n    const updatedStep = {\n      ...step,\n      variableSubstitutions: updatedSubstitutions\n    };\n    console.log('Emitting update-step with:', stepIndex, updatedStep);\n\n    // Emit the update-step event\n    emit('update-step', stepIndex, updatedStep);\n\n    // Close the dialog\n    showSubstitutionDialog.value = false;\n  };\n\n  /**\n   * Get available variables for a specific step\n   * @param {Number} stepIndex - Index of the step\n   * @returns {Array} - List of available variable names\n   */\n  const availableVariablesForStep = stepIndex => {\n    if (stepIndex === null || stepIndex === undefined) {\n      console.log('availableVariablesForStep called with null/undefined stepIndex');\n      return ['Sélectionnez d\\'abord une étape'];\n    }\n\n    // Initialize available variables array\n    let availableVars = [];\n\n    // 1. Collect all variables defined in previous steps\n    if (props.steps && Array.isArray(props.steps)) {\n      for (let i = 0; i < props.steps.length; i++) {\n        // Don't include variables from current step or later steps\n        // except for first step (special: self-reference possible)\n        if (i !== stepIndex || stepIndex === 0) {\n          const step = props.steps[i];\n          if (step && step.variableCaptures && step.variableCaptures.length > 0) {\n            // Add variable names defined in this step\n            const stepVars = step.variableCaptures.map(capture => capture.name);\n            availableVars = [...availableVars, ...stepVars];\n          }\n        }\n      }\n    }\n\n    // 2. Add variables actually captured in previous execution\n    if (props.results && Array.isArray(props.results)) {\n      for (let i = 0; i < props.results.length; i++) {\n        // Allow access to captured variables from all executed steps\n        if (props.results[i] && props.results[i].capturedVariables) {\n          const capturedVars = Object.keys(props.results[i].capturedVariables);\n          availableVars = [...availableVars, ...capturedVars];\n        }\n      }\n    }\n\n    // Remove duplicates\n    const uniqueVars = [...new Set(availableVars)];\n\n    // If no variables are available, return explanatory message\n    if (uniqueVars.length === 0) {\n      if (stepIndex === 0) {\n        console.log('Step 0: No variables available');\n        return ['Define variables in this step to use them here and in later steps'];\n      } else {\n        console.log('No variables available for step', stepIndex);\n        return ['Define variables in steps to use them here'];\n      }\n    }\n    console.log('Variables available for step', stepIndex, ':', uniqueVars);\n    return uniqueVars;\n  };\n  return {\n    showSubstitutionDialog,\n    substitutionForm,\n    substitutionStepIndex,\n    openSubstitutionDialog,\n    saveSubstitution,\n    availableVariablesForStep\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}