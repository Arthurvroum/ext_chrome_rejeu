{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'VariablesTab',\n  props: {\n    steps: {\n      type: Array,\n      required: true\n    },\n    results: {\n      type: Array,\n      default: () => []\n    },\n    globalVariables: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    stepsWithVariables() {\n      return this.steps.map((step, index) => ({\n        ...step,\n        index,\n        hasVariableCaptures: this.hasVariableCaptures(step),\n        hasCapturedVariables: this.hasCapturedVariables(index)\n      })).filter(step => step.hasVariableCaptures || step.hasCapturedVariables);\n    },\n    totalCapturedVariables() {\n      let count = 0;\n      this.steps.forEach((step, index) => {\n        if (this.results && this.results[index] && this.results[index].capturedVariables) {\n          count += Object.keys(this.results[index].capturedVariables).length;\n        }\n      });\n      return count;\n    },\n    hasCapturingSteps() {\n      return this.steps.some(step => step.variableCaptures && step.variableCaptures.length > 0);\n    }\n  },\n  methods: {\n    hasVariableCaptures(step) {\n      return step.variableCaptures && step.variableCaptures.length > 0;\n    },\n    hasCapturedVariables(index) {\n      return this.results && this.results[index] && this.results[index].capturedVariables && Object.keys(this.results[index].capturedVariables).length > 0;\n    },\n    getCapturedVariablesCount(step) {\n      if (!this.results || !this.results[step.index] || !this.results[step.index].capturedVariables) {\n        return 0;\n      }\n      return Object.keys(this.results[step.index].capturedVariables).length;\n    },\n    getDefinedVariablesCount(step) {\n      return (step.variableCaptures || []).length;\n    },\n    getCapturedValue(step, name) {\n      if (!this.results || !this.results[step.index] || !this.results[step.index].capturedVariables) {\n        return null;\n      }\n      return this.results[step.index].capturedVariables[name] || null;\n    },\n    getMethodColor(method) {\n      const colors = {\n        GET: 'primary',\n        POST: 'success',\n        PUT: 'warning',\n        DELETE: 'error',\n        PATCH: 'info'\n      };\n      return colors[method] || 'grey';\n    },\n    getSourceLabel(source) {\n      const sources = {\n        'body': 'Corps de la réponse',\n        'responseBody': 'Corps de la réponse',\n        'headers': 'En-têtes de la réponse',\n        'responseHeaders': 'En-têtes de la réponse',\n        'url': 'URL de la réponse'\n      };\n      return sources[source] || source;\n    },\n    getGlobalCapturedValue(name) {\n      // D'abord, chercher dans la propriété globale\n      if (this.results && this.results.globalVariables && this.results.globalVariables[name]) {\n        return this.results.globalVariables[name];\n      }\n\n      // Ensuite, chercher dans chaque étape individuellement\n      return this.findGlobalVariableInSteps(name);\n    },\n    // Ajouter une méthode pour rechercher dans toutes les étapes si une variable globale a été capturée\n    findGlobalVariableInSteps(name) {\n      // Parcourir tous les résultats d'étapes pour trouver la variable\n      for (let i = 0; i < this.results.length; i++) {\n        const result = this.results[i];\n        if (result && result.globalVariablesCaptures && result.globalVariablesCaptures[name]) {\n          console.log(`Variable globale ${name} trouvée dans l'étape ${i + 1}`);\n          return result.globalVariablesCaptures[name];\n        }\n      }\n      console.log(`Variable globale ${name} non trouvée dans aucune étape`);\n      return null;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}