{"ast":null,"code":"import RecordControls from './RecordControls.vue';\nimport RequestItem from './RequestItem.vue';\nimport WarningMessage from './WarningMessage.vue';\nimport VariableCaptureForm from './VariableCaptureForm.vue';\nimport RecordService from '../../services/recordService';\nimport { hasChromeApi } from '../../utils/chromeApi';\nexport default {\n  components: {\n    RecordControls,\n    RequestItem,\n    WarningMessage,\n    VariableCaptureForm\n  },\n  data() {\n    return {\n      isRecording: false,\n      recordedRequests: [],\n      hasCorrectContentScript: true,\n      showVariableModal: false,\n      selectedRequest: null,\n      selectedVariable: null\n    };\n  },\n  mounted() {\n    this.checkHasCorrectContentScript();\n    this.getRecordedRequests();\n  },\n  methods: {\n    toggleRecording() {\n      if (this.isRecording) {\n        RecordService.stopRecording();\n        this.isRecording = false;\n        this.getRecordedRequests();\n      } else {\n        RecordService.startRecording();\n        this.isRecording = true;\n      }\n    },\n    checkHasCorrectContentScript() {\n      if (!hasChromeApi()) {\n        return;\n      }\n      chrome.tabs.query({\n        active: true,\n        currentWindow: true\n      }, tabs => {\n        const tabId = tabs[0].id;\n        chrome.tabs.sendMessage(tabId, {\n          action: 'check-content-script'\n        }, response => {\n          if (chrome.runtime.lastError) {\n            this.hasCorrectContentScript = false;\n            return;\n          }\n          if (response && response.hasCorrectContentScript) {\n            this.hasCorrectContentScript = true;\n          } else {\n            this.hasCorrectContentScript = false;\n          }\n        });\n      });\n    },\n    getRecordedRequests() {\n      RecordService.getRecordedRequests().then(requests => {\n        this.recordedRequests = requests;\n      });\n    },\n    openVariableDialog(request, variable) {\n      this.selectedRequest = request;\n      this.selectedVariable = variable;\n      this.showVariableModal = true;\n    },\n    saveVariable(requestId, variableName, regex, variableType) {\n      RecordService.setVariable(requestId, variableName, regex, variableType);\n      this.showVariableModal = false;\n      this.getRecordedRequests();\n    },\n    openReplayInNewTab() {\n      // Ouvrir l'onglet de replay même si aucune requête n'a été capturée\n      RecordService.openReplayInNewTab(this.recordedRequests || []);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}