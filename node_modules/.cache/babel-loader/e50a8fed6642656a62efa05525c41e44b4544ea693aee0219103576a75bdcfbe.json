{"ast":null,"code":"export default {\n  name: 'ExecutionOptions',\n  props: {\n    stopOnError: {\n      type: Boolean,\n      default: true\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    stepInterval: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      localStopOnError: this.stopOnError,\n      localStepInterval: this.stepInterval,\n      localStepIntervalText: this.stepInterval.toString()\n    };\n  },\n  watch: {\n    stopOnError(newVal) {\n      this.localStopOnError = newVal;\n    },\n    stepInterval(newVal) {\n      this.localStepInterval = newVal;\n      this.localStepIntervalText = newVal.toString();\n    }\n  },\n  methods: {\n    updateStopOnError(value) {\n      this.$emit('update:stop-on-error', value);\n    },\n    updateStepInterval(value) {\n      this.$emit('update:step-interval', value);\n    },\n    handleIntervalInput(value) {\n      // Vérifier si l'input est un nombre valide\n      const numValue = parseInt(value, 10);\n      if (!isNaN(numValue) && numValue >= 0) {\n        this.localStepInterval = numValue;\n        this.updateStepInterval(numValue);\n      }\n    },\n    validateInterval() {\n      // En cas d'entrée non valide, réinitialiser à la dernière valeur valide\n      if (this.localStepIntervalText === '' || isNaN(parseInt(this.localStepIntervalText, 10))) {\n        this.localStepIntervalText = this.localStepInterval.toString();\n      } else {\n        // S'assurer que la valeur est dans les limites\n        let value = parseInt(this.localStepIntervalText, 10);\n        if (value < 0) value = 0;\n        if (value > 30000) value = 30000; // Maximum de 30 secondes\n\n        this.localStepInterval = value;\n        this.localStepIntervalText = value.toString();\n        this.updateStepInterval(value);\n      }\n    }\n  },\n  mounted() {\n    // Émettre un événement pour indiquer que la progression en temps réel est toujours active\n    this.$nextTick(() => {\n      this.$emit('update:show-runtime-progress', true);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}