{"ast":null,"code":"import RecordControls from './RecordControls.vue';\nimport ReplayOption from './ReplayOption.vue';\nimport WarningMessage from './WarningMessage.vue';\nimport RequestItem from './RequestItem.vue';\nimport recordService from '../../services/recordService';\nimport { isRestrictedUrl } from '../../utils/chromeApi';\nexport default {\n  name: 'RecordTab',\n  components: {\n    RecordControls,\n    ReplayOption,\n    WarningMessage,\n    RequestItem\n  },\n  data() {\n    return {\n      isRecording: false,\n      recordingStatus: 'Ready to record',\n      recordedRequests: [],\n      recordedCount: 0,\n      expandedRequest: null,\n      showReplayOption: false,\n      restrictedUrlWarning: false,\n      activeTabId: null,\n      activeTabUrl: '',\n      contentScriptReady: false\n    };\n  },\n  computed: {\n    hasRecordedData() {\n      return this.recordedRequests && this.recordedRequests.length > 0;\n    }\n  },\n  mounted() {\n    // Check if we're already recording when the popup opens\n    this.checkRecordingStatus();\n\n    // Set up polling to update request count during recording\n    this.statusInterval = setInterval(() => {\n      if (this.isRecording) {\n        this.updateRecordingStatus();\n      }\n    }, 2000);\n\n    // Check current page compatibility\n    this.checkCurrentPageCompatibility();\n  },\n  beforeUnmount() {\n    if (this.statusInterval) {\n      clearInterval(this.statusInterval);\n    }\n  },\n  methods: {\n    async checkRecordingStatus() {\n      const response = await recordService.getRecordingStatus();\n      if (response && response.isRecording) {\n        this.isRecording = true;\n        this.recordingStatus = 'Recording active...';\n        this.recordedCount = response.requestCount || 0;\n      }\n    },\n    async updateRecordingStatus() {\n      const response = await recordService.getRecordingStatus();\n      if (response) {\n        this.recordedCount = response.requestCount || 0;\n      }\n    },\n    async toggleRecording() {\n      if (this.restrictedUrlWarning) {\n        this.recordingStatus = 'Cannot record from this page type';\n        return;\n      }\n      try {\n        if (!this.isRecording) {\n          // Show immediate feedback to user\n          this.recordingStatus = 'Initializing recording...';\n\n          // Start recording\n          const response = await recordService.startRecording();\n          if (response && response.status && !response.error) {\n            this.isRecording = true;\n            this.recordingStatus = 'Recording active...';\n            this.showReplayOption = false;\n          } else {\n            this.recordingStatus = `Error: ${response.error || 'Failed to start recording'}`;\n          }\n        } else {\n          // Stop recording\n          const response = await recordService.stopRecording();\n          if (response && response.status) {\n            this.isRecording = false;\n            this.recordingStatus = 'Recording stopped';\n            this.recordedRequests = response.data || [];\n\n            // Show replay option if we have recorded data\n            if (this.recordedRequests.length > 0) {\n              this.showReplayOption = true;\n            }\n          } else {\n            this.recordingStatus = `Error: ${response.error || 'Failed to stop recording'}`;\n          }\n        }\n      } catch (error) {\n        console.error('Error toggling recording:', error);\n        this.recordingStatus = `Error: ${error.message}`;\n      }\n    },\n    async exportRecording() {\n      try {\n        await recordService.exportAsOpenAPI(this.recordedRequests);\n      } catch (error) {\n        console.error('Error exporting recording:', error);\n        this.recordingStatus = `Export error: ${error.message}`;\n      }\n    },\n    clearRecordings() {\n      this.recordedRequests = [];\n      this.recordingStatus = 'Data cleared';\n      this.showReplayOption = false;\n    },\n    toggleDetails(index) {\n      this.expandedRequest = this.expandedRequest === index ? null : index;\n    },\n    updateRequest(index, updatedRequest) {\n      this.recordedRequests[index] = updatedRequest;\n      // Create a new array to trigger reactivity\n      this.recordedRequests = [...this.recordedRequests];\n    },\n    async openReplayInNewTab() {\n      try {\n        this.recordingStatus = 'Opening replay tab...';\n        const response = await recordService.openReplayInNewTab(this.recordedRequests);\n        if (!response || !response.success) {\n          this.recordingStatus = 'Error opening replay tab';\n        }\n      } catch (error) {\n        console.error('Error opening replay tab:', error);\n        this.recordingStatus = `Error opening replay tab: ${error.message}`;\n      }\n    },\n    async checkCurrentPageCompatibility() {\n      try {\n        // Get active tab info\n        const tabs = await chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        });\n        if (!tabs || !tabs.length) return;\n        const activeTab = tabs[0];\n        this.activeTabId = activeTab.id;\n        this.activeTabUrl = activeTab.url || '';\n\n        // Check if it's a restricted URL\n        this.restrictedUrlWarning = isRestrictedUrl(this.activeTabUrl);\n        if (this.restrictedUrlWarning) {\n          this.recordingStatus = 'Recording not available on this page';\n        }\n      } catch (error) {\n        console.error('Error checking page compatibility:', error);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}