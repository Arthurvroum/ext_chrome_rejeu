{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport ResultsSummary from './ResultsSummary.vue';\nimport StepItem from './StepItem.vue';\nimport CaptureDialog from './CaptureDialog.vue';\nimport SubstitutionDialog from './SubstitutionDialog.vue';\nimport { useStepStatus } from '../composables/useStepStatus';\nimport { useVariableCapture } from '../composables/useVariableCapture';\nimport { useVariableSubstitution } from '../composables/useVariableSubstitution';\nexport default {\n  name: 'StepsList',\n  components: {\n    ResultsSummary,\n    StepItem,\n    CaptureDialog,\n    SubstitutionDialog\n  },\n  props: {\n    steps: {\n      type: Array,\n      required: true\n    },\n    expandedStep: {\n      type: Number,\n      default: null\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    results: {\n      type: Array,\n      default: () => []\n    },\n    currentStepIndex: {\n      type: Number,\n      default: -1\n    },\n    executionOptions: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['toggle-step', 'update-step', 'toggle-all-steps', 'export-results', 'generate-pdf'],\n  setup(props, {\n    emit\n  }) {\n    // Composables\n    const {\n      progressStatus,\n      handleStepProgress\n    } = useStepStatus();\n    const {\n      captureSourceOptions,\n      showCaptureDialog,\n      captureForm,\n      captureStepIndex,\n      openCaptureDialog,\n      saveCapture\n    } = useVariableCapture(props, emit);\n    const {\n      showSubstitutionDialog,\n      substitutionForm,\n      substitutionStepIndex,\n      openSubstitutionDialog,\n      saveSubstitution,\n      availableVariablesForStep\n    } = useVariableSubstitution(props, emit);\n\n    // Computed\n    const hasResults = computed(() => props.results && props.results.length > 0);\n    const availableStepsForVariables = computed(() => {\n      return props.steps.map((step, index) => ({\n        label: `Ã‰tape ${index + 1}: ${step.name || step.url}`,\n        value: index\n      }));\n    });\n\n    // Lifecycle\n    onMounted(() => {\n      window.addEventListener('step-execution-progress', handleStepProgress);\n      console.log('StepsList: Listening for step-execution-progress events');\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('step-execution-progress', handleStepProgress);\n    });\n    return {\n      hasResults,\n      progressStatus,\n      availableStepsForVariables,\n      // Variable Capture\n      captureSourceOptions,\n      showCaptureDialog,\n      captureForm,\n      captureStepIndex,\n      openCaptureDialog,\n      saveCapture,\n      // Variable Substitution\n      showSubstitutionDialog,\n      substitutionForm,\n      substitutionStepIndex,\n      openSubstitutionDialog,\n      saveSubstitution,\n      availableVariablesForStep\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}