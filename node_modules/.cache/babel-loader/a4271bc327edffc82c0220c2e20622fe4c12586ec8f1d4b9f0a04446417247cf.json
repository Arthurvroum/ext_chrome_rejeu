{"ast":null,"code":"export default {\n  name: 'ReplayHeader',\n  props: {\n    executionStatus: {\n      type: String,\n      default: 'Ready to start'\n    },\n    autoLoadedData: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    statusColor() {\n      if (this.executionStatus.includes('Error') || this.executionStatus.includes('Failed')) {\n        return 'error-lighten-4';\n      } else if (this.executionStatus.includes('Complete')) {\n        return 'success-lighten-4';\n      } else if (this.executionStatus.includes('Running')) {\n        return 'info-lighten-4';\n      }\n      return 'grey-lighten-4';\n    },\n    statusIcon() {\n      if (this.executionStatus.includes('Error') || this.executionStatus.includes('Failed')) {\n        return 'mdi-alert-circle-outline';\n      } else if (this.executionStatus.includes('Complete')) {\n        return 'mdi-check-circle-outline';\n      } else if (this.executionStatus.includes('Running')) {\n        return 'mdi-refresh';\n      }\n      return 'mdi-information-outline';\n    }\n  },\n  methods: {\n    triggerFileInput() {\n      // Trigger the hidden file input\n      this.$refs.fileInput.click();\n    },\n    onFileSelected(event) {\n      // Pass the file to the parent component\n      const file = event.target?.files?.[0];\n      if (file) {\n        this.$emit('load-file', file);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}