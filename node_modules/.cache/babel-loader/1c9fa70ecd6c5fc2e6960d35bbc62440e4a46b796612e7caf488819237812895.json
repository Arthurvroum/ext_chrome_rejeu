{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nexport default {\n  name: 'ExecutionOptions',\n  props: {\n    stopOnError: {\n      type: Boolean,\n      default: true\n    },\n    errorOnCapture: {\n      type: Boolean,\n      default: false\n    },\n    stepInterval: {\n      type: Number,\n      default: 1000\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    baseUrl: {\n      type: String,\n      default: ''\n    },\n    globalVariables: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      localStopOnError: this.stopOnError,\n      localErrorOnCapture: this.errorOnCapture,\n      localStepInterval: this.stepInterval,\n      localBaseUrl: this.baseUrl,\n      localGlobalVariables: this.globalVariables ? [...this.globalVariables] : [],\n      buttonSuccess: false,\n      clearSuccess: false,\n      showGlobalVariablesDialog: false,\n      newVariable: {\n        name: '',\n        regex: '',\n        source: 'body'\n      },\n      captureSourceOptions: [{\n        title: 'Corps de la réponse',\n        value: 'body'\n      }, {\n        title: 'En-têtes de la réponse',\n        value: 'headers'\n      }, {\n        title: 'URL de la réponse',\n        value: 'url'\n      }]\n    };\n  },\n  watch: {\n    stopOnError(newVal) {\n      this.localStopOnError = newVal;\n    },\n    errorOnCapture(newVal) {\n      this.localErrorOnCapture = newVal;\n    },\n    stepInterval(newVal) {\n      this.localStepInterval = newVal;\n    },\n    baseUrl(newVal) {\n      this.localBaseUrl = newVal;\n    },\n    globalVariables(newVal) {\n      this.localGlobalVariables = newVal ? [...newVal] : [];\n    }\n  },\n  methods: {\n    updateStopOnError(value) {\n      this.$emit('update:stop-on-error', value);\n    },\n    updateErrorOnCapture(value) {\n      this.$emit('update:error-on-capture', value);\n    },\n    updateStepInterval(value) {\n      this.$emit('update:step-interval', value);\n    },\n    updateBaseUrl(value) {\n      this.$emit('update:base-url', value);\n    },\n    startReplayWithAnimation() {\n      // Émettre immédiatement l'événement sans animation de succès\n      this.$emit('start-replay');\n    },\n    clearResultsWithAnimation() {\n      // Émettre immédiatement l'événement sans animation de succès\n      this.$emit('clear-results');\n    },\n    addGlobalVariable() {\n      if (this.newVariable.name && this.newVariable.regex) {\n        this.localGlobalVariables.push({\n          ...this.newVariable\n        });\n        this.newVariable.name = '';\n        this.newVariable.regex = '';\n      }\n    },\n    removeGlobalVariable(index) {\n      this.localGlobalVariables.splice(index, 1);\n    },\n    saveGlobalVariables() {\n      this.$emit('update:global-variables', [...this.localGlobalVariables]);\n      this.showGlobalVariablesDialog = false;\n\n      // Afficher un message de confirmation\n      this.$root.$emit('show-snackbar', {\n        text: 'Variables globales enregistrées avec succès',\n        color: 'success',\n        timeout: 3000\n      });\n    },\n    getSourceLabel(source) {\n      const option = this.captureSourceOptions.find(opt => opt.value === source);\n      return option ? option.title : source;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}