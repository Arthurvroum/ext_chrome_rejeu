{"ast":null,"code":"import { ref } from 'vue';\nexport function useVariableCapture(props, emit) {\n  const captureSourceOptions = [{\n    title: 'Corps de la réponse',\n    value: 'body'\n  }, {\n    title: 'En-têtes de la réponse',\n    value: 'headers'\n  }, {\n    title: 'URL de la réponse',\n    value: 'url'\n  }];\n  const showCaptureDialog = ref(false);\n  const captureForm = ref({\n    name: '',\n    regex: '',\n    source: 'body',\n    required: false\n  });\n  const captureStepIndex = ref(null);\n\n  /**\n   * Open the capture dialog for a specific step\n   * @param {Number} stepIndex - Index of the step\n   */\n  const openCaptureDialog = stepIndex => {\n    // Log pour debug\n    console.log('Opening capture dialog for step', stepIndex);\n\n    // Initialiser le formulaire avec un nom dynamique pour éviter les doublons\n    captureForm.value = {\n      name: ``,\n      regex: '',\n      source: 'body',\n      required: false\n    };\n    captureStepIndex.value = stepIndex;\n    showCaptureDialog.value = true;\n  };\n\n  /**\n   * Save a new capture to the step\n   * @param {Object} formData - The form data to save\n   */\n  const saveCapture = formData => {\n    console.log('saveCapture called with:', formData);\n    if (!formData || !formData.name || !formData.regex) {\n      console.error('Invalid form data:', formData);\n      return;\n    }\n    const stepIndex = captureStepIndex.value;\n    if (stepIndex === null || stepIndex === undefined) {\n      console.error('No step index specified for capture, captureStepIndex is:', captureStepIndex.value);\n      return;\n    }\n    if (!props.steps || !props.steps[stepIndex]) {\n      console.error(`Step at index ${stepIndex} not found. Steps:`, props.steps);\n      return;\n    }\n    const step = props.steps[stepIndex];\n    const captures = Array.isArray(step.variableCaptures) ? [...step.variableCaptures] : [];\n    const newCapture = {\n      ...formData\n    };\n    const updatedCaptures = [...captures, newCapture];\n\n    // Log pour debug\n    console.log('Saving capture:', newCapture, 'for step', stepIndex);\n    console.log('Current captures:', captures);\n    console.log('Updated captures will be:', updatedCaptures);\n\n    // Créer un nouvel objet step avec les captures mises à jour\n    const updatedStep = {\n      ...step,\n      variableCaptures: updatedCaptures\n    };\n    console.log('Emitting update-step with:', stepIndex, updatedStep);\n\n    // Emit the update-step event\n    emit('update-step', stepIndex, updatedStep);\n\n    // Close the dialog\n    showCaptureDialog.value = false;\n  };\n  return {\n    captureSourceOptions,\n    showCaptureDialog,\n    captureForm,\n    captureStepIndex,\n    openCaptureDialog,\n    saveCapture\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}