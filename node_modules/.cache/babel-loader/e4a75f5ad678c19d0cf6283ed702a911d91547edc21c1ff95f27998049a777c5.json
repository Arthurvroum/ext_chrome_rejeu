{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport RecordTab from './components/record/RecordTab.vue';\nimport ReplayTab from './components/ReplayTab.vue';\nexport default {\n  name: 'App',\n  components: {\n    RecordTab,\n    ReplayTab\n  },\n  data() {\n    return {\n      currentTab: 'record',\n      isReplayTab: false\n    };\n  },\n  mounted() {\n    // Check if we're in replay tab mode\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('page') === 'replay-window') {\n      this.isReplayTab = true;\n      document.title = 'Network Request Replay';\n      document.getElementById('app').classList.add('full-window');\n      document.documentElement.style.height = '100%';\n      document.documentElement.style.width = '100%';\n      document.documentElement.style.overflow = 'hidden';\n      document.body.style.height = '100%';\n      document.body.style.width = '100%';\n      document.body.style.margin = '0';\n      document.body.style.padding = '0';\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'relative';\n\n      // Force all parent containers to take full width\n      setTimeout(() => {\n        const appElement = document.getElementById('app');\n        if (appElement) {\n          // Force full width with !important\n          appElement.style.cssText += 'width: 100vw !important; max-width: 100vw !important; left: 0 !important; position: absolute !important;';\n\n          // Also find any direct children and ensure they take full width\n          const children = appElement.children;\n          for (let i = 0; i < children.length; i++) {\n            children[i].style.cssText += 'width: 100% !important; max-width: 100% !important;';\n          }\n        }\n      }, 0);\n      return;\n    }\n\n    // For regular extension mode\n    const tab = urlParams.get('tab');\n    if (tab === 'record' || tab === 'replay') {\n      this.currentTab = tab;\n      document.getElementById('app').classList.add('full-window');\n\n      // These same styles are needed for tab mode\n      document.documentElement.style.height = '100%';\n      document.documentElement.style.overflow = 'hidden';\n      document.body.style.height = '100%';\n      document.body.style.margin = '0';\n      document.body.style.padding = '0';\n      document.body.style.overflow = 'hidden';\n    }\n  },\n  methods: {\n    switchToReplay() {\n      this.currentTab = 'replay';\n    },\n    openReplayTab() {\n      chrome.runtime.sendMessage({\n        action: 'openAdvancedWindow',\n        tab: 'replay'\n      }, response => {\n        if (response && response.success) {\n          console.log('Replay tab opened with ID:', response.tabId);\n        } else {\n          console.error('Failed to open replay tab');\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}