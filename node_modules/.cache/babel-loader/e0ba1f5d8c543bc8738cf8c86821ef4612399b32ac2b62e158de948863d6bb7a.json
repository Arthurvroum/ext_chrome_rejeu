{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/**\n * Utility functions for formatting data in the application\n */\n\n/**\n * Format JSON data for display\n * @param {any} data - The data to format\n * @returns {string} - Formatted string representation\n */\nexport function formatJson(data) {\n  if (data === undefined || data === null) return 'No data available';\n  try {\n    if (typeof data === 'object') {\n      return JSON.stringify(data, null, 2);\n    } else if (typeof data === 'string') {\n      // Try to parse as JSON if it's a string\n      try {\n        const parsed = JSON.parse(data);\n        return JSON.stringify(parsed, null, 2);\n      } catch {\n        // If parsing fails, just return the string\n        return data;\n      }\n    }\n    // Handle other types\n    return String(data);\n  } catch (e) {\n    console.error('Error formatting JSON:', e);\n    return String(data);\n  }\n}\n\n/**\n * Truncate a string to a maximum length\n * @param {string} str - String to truncate\n * @param {number} maxLength - Maximum length\n * @returns {string} - Truncated string\n */\nexport function truncateString(str, maxLength = 50) {\n  if (!str || str.length <= maxLength) return str;\n  return str.substring(0, maxLength - 3) + '...';\n}\n\n/**\n * Format a date as a locale string\n * @param {Date|string|number} date - Date to format\n * @returns {string} - Formatted date string\n */\nexport function formatDate(date) {\n  if (!date) return '';\n  const d = new Date(date);\n  return d.toLocaleString();\n}\n\n/**\n * Extract path from URL\n * @param {string} url - Full URL\n * @returns {string} - Path portion of URL\n */\nexport function getPathFromUrl(url) {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.pathname;\n  } catch (e) {\n    return url;\n  }\n}\n\n/**\n * Check if a URL is relative (doesn't have protocol or starting slash)\n * @param {string} url - URL to check\n * @returns {boolean} - True if the URL is relative\n */\nexport function isRelativeUrl(url) {\n  if (!url) return false;\n\n  // A URL is relative if it doesn't start with a protocol or a slash\n  // This regex checks if the URL has a protocol like http:// or https://\n  const hasProtocol = /^[a-zA-Z][a-zA-Z\\d+\\-.]*:\\/\\//.test(url);\n\n  // Also considered absolute if it starts with a slash or double slash\n  const isAbsolutePath = url.startsWith('/') || url.startsWith('//');\n  return !hasProtocol && !isAbsolutePath;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}