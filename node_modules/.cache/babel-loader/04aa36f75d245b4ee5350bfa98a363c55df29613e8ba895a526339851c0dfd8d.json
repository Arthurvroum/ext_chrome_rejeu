{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VTimeline.css\";\n\n// Composables\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.js\";\nimport { useRtl } from \"../../composables/locale.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\nimport { computed, toRef } from 'vue';\nimport { convertToUnit, genericComponent, pick, propsFactory, useRender } from \"../../util/index.js\"; // Types\nimport { makeVTimelineItemProps } from \"./VTimelineItem.js\";\nexport const makeVTimelineProps = propsFactory({\n  align: {\n    type: String,\n    default: 'center',\n    validator: v => ['center', 'start'].includes(v)\n  },\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  justify: {\n    type: String,\n    default: 'auto',\n    validator: v => ['auto', 'center'].includes(v)\n  },\n  side: {\n    type: String,\n    validator: v => v == null || ['start', 'end'].includes(v)\n  },\n  lineThickness: {\n    type: [String, Number],\n    default: 2\n  },\n  lineColor: String,\n  truncateLine: {\n    type: String,\n    validator: v => ['start', 'end', 'both'].includes(v)\n  },\n  ...pick(makeVTimelineItemProps({\n    lineInset: 0\n  }), ['dotColor', 'fillDot', 'hideOpposite', 'iconColor', 'lineInset', 'size']),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeTagProps(),\n  ...makeThemeProps()\n}, 'VTimeline');\nexport const VTimeline = genericComponent()({\n  name: 'VTimeline',\n  props: makeVTimelineProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    provideDefaults({\n      VTimelineDivider: {\n        lineColor: toRef(props, 'lineColor')\n      },\n      VTimelineItem: {\n        density: toRef(props, 'density'),\n        dotColor: toRef(props, 'dotColor'),\n        fillDot: toRef(props, 'fillDot'),\n        hideOpposite: toRef(props, 'hideOpposite'),\n        iconColor: toRef(props, 'iconColor'),\n        lineColor: toRef(props, 'lineColor'),\n        lineInset: toRef(props, 'lineInset'),\n        size: toRef(props, 'size')\n      }\n    });\n    const sideClasses = computed(() => {\n      const side = props.side ? props.side : props.density !== 'default' ? 'end' : null;\n      return side && `v-timeline--side-${side}`;\n    });\n    const truncateClasses = computed(() => {\n      const classes = ['v-timeline--truncate-line-start', 'v-timeline--truncate-line-end'];\n      switch (props.truncateLine) {\n        case 'both':\n          return classes;\n        case 'start':\n          return classes[0];\n        case 'end':\n          return classes[1];\n        default:\n          return null;\n      }\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-timeline', `v-timeline--${props.direction}`, `v-timeline--align-${props.align}`, `v-timeline--justify-${props.justify}`, truncateClasses.value, {\n        'v-timeline--inset-line': !!props.lineInset\n      }, themeClasses.value, densityClasses.value, sideClasses.value, rtlClasses.value, props.class],\n      \"style\": [{\n        '--v-timeline-line-thickness': convertToUnit(props.lineThickness)\n      }, props.style]\n    }, slots));\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}