{"ast":null,"code":"/**\n * Utilities for interacting with Chrome extension APIs\n */\n\n/**\n * Send a message to the background script\n * @param {Object} message - The message to send\n * @returns {Promise} - Promise that resolves with the response\n */\nexport function sendMessageToBackground(message) {\n  return new Promise((resolve, reject) => {\n    try {\n      chrome.runtime.sendMessage(message, response => {\n        if (chrome.runtime.lastError) {\n          console.error('Error sending message:', chrome.runtime.lastError);\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve(response);\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Send a message to a content script in a specific tab\n * @param {number} tabId - The ID of the tab\n * @param {Object} message - The message to send\n * @returns {Promise} - Promise that resolves with the response\n */\nexport function sendMessageToTab(tabId, message) {\n  return new Promise((resolve, reject) => {\n    try {\n      chrome.tabs.sendMessage(tabId, message, response => {\n        if (chrome.runtime.lastError) {\n          console.warn('Tab message error:', chrome.runtime.lastError.message);\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve(response);\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message to tab:', error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Get the active tab in the current window\n * @returns {Promise} - Promise that resolves with the active tab\n */\nexport function getActiveTab() {\n  return new Promise((resolve, reject) => {\n    try {\n      chrome.tabs.query({\n        active: true,\n        currentWindow: true\n      }, tabs => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n        } else if (tabs && tabs.length > 0) {\n          resolve(tabs[0]);\n        } else {\n          reject(new Error('No active tab found'));\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Check if a URL is restricted (e.g., chrome://, extension pages)\n * @param {string} url - The URL to check\n * @returns {boolean} - True if the URL is restricted\n */\nexport function isRestrictedUrl(url) {\n  if (!url) return true;\n  const restrictedProtocols = ['chrome://', 'chrome-extension://', 'devtools://', 'chrome-devtools://', 'edge://', 'brave://', 'view-source:', 'about:', 'file://', 'data:', 'javascript:'];\n  return restrictedProtocols.some(protocol => url.startsWith(protocol));\n}\n\n/**\n * Inject content script into a tab\n * @param {number} tabId - The ID of the tab\n * @returns {Promise} - Promise that resolves when script is injected\n */\nexport function injectContentScript(tabId) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // First check if tab is valid\n      const tab = await chrome.tabs.get(tabId);\n\n      // Skip injecting into restricted URLs\n      if (isRestrictedUrl(tab.url)) {\n        reject(new Error(`Cannot inject content script into restricted URL: ${tab.url}`));\n        return;\n      }\n\n      // Only inject on http/https URLs\n      if (tab.url.startsWith('http')) {\n        const result = await chrome.scripting.executeScript({\n          target: {\n            tabId: tabId\n          },\n          files: ['content-script.js']\n        });\n        resolve(result);\n      } else {\n        reject(new Error(`Cannot inject content script into URL: ${tab.url}`));\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Check if content script is ready in a tab\n * @param {number} tabId - The ID of the tab\n * @param {number} timeout - Timeout in milliseconds\n * @returns {Promise} - Promise that resolves with true if ready, false otherwise\n */\nexport function checkContentScriptReady(tabId, timeout = 1000) {\n  return new Promise(resolve => {\n    const startTime = Date.now();\n    function check() {\n      try {\n        sendMessageToTab(tabId, {\n          action: 'pingContentScript'\n        }).then(response => {\n          console.log('Content script is ready:', response);\n          resolve(true);\n        }).catch(() => {\n          if (Date.now() - startTime < timeout) {\n            setTimeout(check, 100);\n          } else {\n            resolve(false);\n          }\n        });\n      } catch (error) {\n        if (Date.now() - startTime < timeout) {\n          setTimeout(check, 100);\n        } else {\n          resolve(false);\n        }\n      }\n    }\n    check();\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}