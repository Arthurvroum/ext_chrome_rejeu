{"ast":null,"code":"// Composables\nimport { createDate, DateAdapterSymbol, DateOptionsSymbol } from \"./composables/date/date.js\";\nimport { createDefaults, DefaultsSymbol } from \"./composables/defaults.js\";\nimport { createDisplay, DisplaySymbol } from \"./composables/display.js\";\nimport { createGoTo, GoToSymbol } from \"./composables/goto.js\";\nimport { createIcons, IconSymbol } from \"./composables/icons.js\";\nimport { createLocale, LocaleSymbol } from \"./composables/locale.js\";\nimport { createTheme, ThemeSymbol } from \"./composables/theme.js\"; // Utilities\nimport { effectScope, nextTick, reactive } from 'vue';\nimport { defineComponent, IN_BROWSER, mergeDeep } from \"./util/index.js\"; // Types\n// Exports\nexport * from \"./composables/index.js\";\nexport * from \"./types.js\";\nexport function createVuetify() {\n  let vuetify = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    blueprint,\n    ...rest\n  } = vuetify;\n  const options = mergeDeep(blueprint, rest);\n  const {\n    aliases = {},\n    components = {},\n    directives = {}\n  } = options;\n  const scope = effectScope();\n  return scope.run(() => {\n    const defaults = createDefaults(options.defaults);\n    const display = createDisplay(options.display, options.ssr);\n    const theme = createTheme(options.theme);\n    const icons = createIcons(options.icons);\n    const locale = createLocale(options.locale);\n    const date = createDate(options.date, locale);\n    const goTo = createGoTo(options.goTo, locale);\n    function install(app) {\n      for (const key in directives) {\n        app.directive(key, directives[key]);\n      }\n      for (const key in components) {\n        app.component(key, components[key]);\n      }\n      for (const key in aliases) {\n        app.component(key, defineComponent({\n          ...aliases[key],\n          name: key,\n          aliasName: aliases[key].name\n        }));\n      }\n      const appScope = effectScope();\n      appScope.run(() => {\n        theme.install(app);\n      });\n      app.onUnmount(() => appScope.stop());\n      app.provide(DefaultsSymbol, defaults);\n      app.provide(DisplaySymbol, display);\n      app.provide(ThemeSymbol, theme);\n      app.provide(IconSymbol, icons);\n      app.provide(LocaleSymbol, locale);\n      app.provide(DateOptionsSymbol, date.options);\n      app.provide(DateAdapterSymbol, date.instance);\n      app.provide(GoToSymbol, goTo);\n      if (IN_BROWSER && options.ssr) {\n        if (app.$nuxt) {\n          app.$nuxt.hook('app:suspense:resolve', () => {\n            display.update();\n          });\n        } else {\n          const {\n            mount\n          } = app;\n          app.mount = function () {\n            const vm = mount(...arguments);\n            nextTick(() => display.update());\n            app.mount = mount;\n            return vm;\n          };\n        }\n      }\n      if (typeof __VUE_OPTIONS_API__ !== 'boolean' || __VUE_OPTIONS_API__) {\n        app.mixin({\n          computed: {\n            $vuetify() {\n              return reactive({\n                defaults: inject.call(this, DefaultsSymbol),\n                display: inject.call(this, DisplaySymbol),\n                theme: inject.call(this, ThemeSymbol),\n                icons: inject.call(this, IconSymbol),\n                locale: inject.call(this, LocaleSymbol),\n                date: inject.call(this, DateAdapterSymbol)\n              });\n            }\n          }\n        });\n      }\n    }\n    function unmount() {\n      scope.stop();\n    }\n    return {\n      install,\n      unmount,\n      defaults,\n      display,\n      theme,\n      icons,\n      locale,\n      date,\n      goTo\n    };\n  });\n}\nexport const version = \"3.8.1\";\ncreateVuetify.version = version;\n\n// Vue's inject() can only be used in setup\nfunction inject(key) {\n  const vm = this.$;\n  const provides = vm.parent?.provides ?? vm.vnode.appContext?.provides;\n  if (provides && key in provides) {\n    return provides[key];\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}