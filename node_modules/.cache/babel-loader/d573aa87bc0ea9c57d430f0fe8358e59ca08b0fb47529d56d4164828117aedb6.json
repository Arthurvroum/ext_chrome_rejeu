{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { computed } from 'vue';\nexport default function useVariables(steps, results, variableStore) {\n  // Computed property to get all variable names\n  const availableVariables = computed(() => {\n    if (!variableStore.value) return [];\n    return Object.keys(variableStore.value);\n  });\n\n  // Get all variables captured in a specific step\n  function getStepCaptures(stepIndex) {\n    if (!results.value || !results.value[stepIndex] || !results.value[stepIndex].captures) {\n      return [];\n    }\n    return results.value[stepIndex].captures || [];\n  }\n\n  // Check if a step has variable captures\n  function hasStepCaptures(stepIndex) {\n    const captures = getStepCaptures(stepIndex);\n    return captures && captures.length > 0;\n  }\n\n  // Get variables used in a specific step\n  function getStepVariables(stepIndex) {\n    if (!steps.value || !steps.value[stepIndex]) return [];\n    const step = steps.value[stepIndex];\n    const substitutions = step.substitutions || [];\n    return substitutions.map(sub => sub.variable).filter(Boolean);\n  }\n\n  // Check if a step uses variables\n  function hasStepVariables(stepIndex) {\n    const variables = getStepVariables(stepIndex);\n    return variables && variables.length > 0;\n  }\n\n  // Format variable values for display\n  function formatVariableValue(value) {\n    if (value === undefined || value === null) return 'null';\n    if (typeof value === 'object') {\n      try {\n        return JSON.stringify(value, null, 2);\n      } catch (e) {\n        return String(value);\n      }\n    }\n    return String(value);\n  }\n\n  // Get current value of a variable\n  function getVariableValue(name) {\n    if (!variableStore.value || !variableStore.value[name]) return null;\n    return variableStore.value[name];\n  }\n  return {\n    availableVariables,\n    getStepCaptures,\n    hasStepCaptures,\n    getStepVariables,\n    hasStepVariables,\n    formatVariableValue,\n    getVariableValue\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}