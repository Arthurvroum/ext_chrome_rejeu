{"ast":null,"code":"import { computed, ref, watch } from 'vue';\nimport useSteps from '../../../composables/useSteps';\nimport useStepResults from '../../../composables/useStepResults';\nexport default {\n  name: 'StepItem',\n  props: {\n    step: {\n      type: Object,\n      required: true\n    },\n    stepIndex: {\n      type: Number,\n      required: true\n    },\n    isExpanded: {\n      type: Boolean,\n      default: false\n    },\n    isReplaying: {\n      type: Boolean,\n      default: false\n    },\n    currentStepIndex: {\n      type: Number,\n      default: -1\n    },\n    result: {\n      type: Object,\n      default: null\n    },\n    progressStatus: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const {\n      getMethodColor\n    } = useSteps();\n    const {\n      getStepResultStatus,\n      hasResult,\n      hasResultError,\n      getResultError,\n      getStatusColor,\n      getStatusIcon\n    } = useStepResults();\n\n    // État local modifiable pour la case à cocher\n    const localEnabled = ref(props.step.enabled);\n\n    // Observer les changements sur la prop step.enabled\n    watch(() => props.step.enabled, newValue => {\n      localEnabled.value = newValue;\n    });\n\n    // Calculer si cette étape est l'étape en cours\n    const isCurrentStep = computed(() => {\n      return props.stepIndex === props.currentStepIndex;\n    });\n\n    // Obtenir le statut de l'étape\n    const stepStatus = computed(() => {\n      return getStepResultStatus([props.result], 0, props.progressStatus);\n    });\n\n    // Vérifier si l'étape a un résultat\n    const hasStepResult = computed(() => {\n      return hasResult([props.result], 0);\n    });\n\n    // Vérifier si l'étape a une erreur\n    const hasError = computed(() => {\n      return hasResultError([props.result], 0);\n    });\n\n    // Obtenir le message d'erreur\n    const errorMessage = computed(() => {\n      return getResultError([props.result], 0);\n    });\n\n    // Couleur de la méthode HTTP\n    const methodColor = computed(() => {\n      return getMethodColor(props.step.method);\n    });\n\n    // Couleur du statut\n    const statusColor = computed(() => {\n      return getStatusColor(stepStatus.value);\n    });\n\n    // Icône du statut\n    const statusIcon = computed(() => {\n      return getStatusIcon(stepStatus.value);\n    });\n\n    // Mettre à jour l'activation de l'étape\n    const updateEnabled = () => {\n      emit('update-step', {\n        enabled: localEnabled.value,\n        skip: !localEnabled.value\n      });\n    };\n    return {\n      localEnabled,\n      isCurrentStep,\n      stepStatus,\n      hasStepResult,\n      hasError,\n      errorMessage,\n      methodColor,\n      statusColor,\n      statusIcon,\n      updateEnabled\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}