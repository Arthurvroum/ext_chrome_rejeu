{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* eslint-disable max-statements */\n/* eslint-disable no-labels */\n\n// Utilities\nimport { computed, shallowRef, unref, watchEffect, createVNode as _createVNode, Fragment as _Fragment } from 'vue';\nimport { getPropertyFromItem, propsFactory, wrapInArray } from \"../util/index.js\"; // Types\n/**\n * - boolean: match without highlight\n * - number: single match (index), length already known\n * - []: single match (start, end)\n * - [][]: multiple matches (start, end), shouldn't overlap\n */\n// Composables\nexport const defaultFilter = (value, query, item) => {\n  if (value == null || query == null) return -1;\n  value = value.toString().toLocaleLowerCase();\n  query = query.toString().toLocaleLowerCase();\n  const result = [];\n  let idx = value.indexOf(query);\n  while (~idx) {\n    result.push([idx, idx + query.length]);\n    idx = value.indexOf(query, idx + query.length);\n  }\n  return result.length ? result : -1;\n};\nfunction normaliseMatch(match, query) {\n  if (match == null || typeof match === 'boolean' || match === -1) return;\n  if (typeof match === 'number') return [[match, query.length]];\n  if (Array.isArray(match[0])) return match;\n  return [match];\n}\nexport const makeFilterProps = propsFactory({\n  customFilter: Function,\n  customKeyFilter: Object,\n  filterKeys: [Array, String],\n  filterMode: {\n    type: String,\n    default: 'intersection'\n  },\n  noFilter: Boolean\n}, 'filter');\nexport function filterItems(items, query, options) {\n  const array = [];\n  // always ensure we fall back to a functioning filter\n  const filter = options?.default ?? defaultFilter;\n  const keys = options?.filterKeys ? wrapInArray(options.filterKeys) : false;\n  const customFiltersLength = Object.keys(options?.customKeyFilter ?? {}).length;\n  if (!items?.length) return array;\n  loop: for (let i = 0; i < items.length; i++) {\n    const [item, transformed = item] = wrapInArray(items[i]);\n    const customMatches = {};\n    const defaultMatches = {};\n    let match = -1;\n    if ((query || customFiltersLength > 0) && !options?.noFilter) {\n      if (typeof item === 'object') {\n        const filterKeys = keys || Object.keys(transformed);\n        for (const key of filterKeys) {\n          const value = getPropertyFromItem(transformed, key);\n          const keyFilter = options?.customKeyFilter?.[key];\n          match = keyFilter ? keyFilter(value, query, item) : filter(value, query, item);\n          if (match !== -1 && match !== false) {\n            if (keyFilter) customMatches[key] = normaliseMatch(match, query);else defaultMatches[key] = normaliseMatch(match, query);\n          } else if (options?.filterMode === 'every') {\n            continue loop;\n          }\n        }\n      } else {\n        match = filter(item, query, item);\n        if (match !== -1 && match !== false) {\n          defaultMatches.title = normaliseMatch(match, query);\n        }\n      }\n      const defaultMatchesLength = Object.keys(defaultMatches).length;\n      const customMatchesLength = Object.keys(customMatches).length;\n      if (!defaultMatchesLength && !customMatchesLength) continue;\n      if (options?.filterMode === 'union' && customMatchesLength !== customFiltersLength && !defaultMatchesLength) continue;\n      if (options?.filterMode === 'intersection' && (customMatchesLength !== customFiltersLength || !defaultMatchesLength)) continue;\n    }\n    array.push({\n      index: i,\n      matches: {\n        ...defaultMatches,\n        ...customMatches\n      }\n    });\n  }\n  return array;\n}\nexport function useFilter(props, items, query, options) {\n  const filteredItems = shallowRef([]);\n  const filteredMatches = shallowRef(new Map());\n  const transformedItems = computed(() => options?.transform ? unref(items).map(item => [item, options.transform(item)]) : unref(items));\n  watchEffect(() => {\n    const _query = typeof query === 'function' ? query() : unref(query);\n    const strQuery = typeof _query !== 'string' && typeof _query !== 'number' ? '' : String(_query);\n    const results = filterItems(transformedItems.value, strQuery, {\n      customKeyFilter: {\n        ...props.customKeyFilter,\n        ...unref(options?.customKeyFilter)\n      },\n      default: props.customFilter,\n      filterKeys: props.filterKeys,\n      filterMode: props.filterMode,\n      noFilter: props.noFilter\n    });\n    const originalItems = unref(items);\n    const _filteredItems = [];\n    const _filteredMatches = new Map();\n    results.forEach(_ref => {\n      let {\n        index,\n        matches\n      } = _ref;\n      const item = originalItems[index];\n      _filteredItems.push(item);\n      _filteredMatches.set(item.value, matches);\n    });\n    filteredItems.value = _filteredItems;\n    filteredMatches.value = _filteredMatches;\n  });\n  function getMatches(item) {\n    return filteredMatches.value.get(item.value);\n  }\n  return {\n    filteredItems,\n    filteredMatches,\n    getMatches\n  };\n}\nexport function highlightResult(name, text, matches) {\n  if (matches == null || !matches.length) return text;\n  return matches.map((match, i) => {\n    const start = i === 0 ? 0 : matches[i - 1][1];\n    const result = [_createVNode(\"span\", {\n      \"class\": `${name}__unmask`\n    }, [text.slice(start, match[0])]), _createVNode(\"span\", {\n      \"class\": `${name}__mask`\n    }, [text.slice(match[0], match[1])])];\n    if (i === matches.length - 1) {\n      result.push(_createVNode(\"span\", {\n        \"class\": `${name}__unmask`\n      }, [text.slice(match[1])]));\n    }\n    return _createVNode(_Fragment, null, [result]);\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}